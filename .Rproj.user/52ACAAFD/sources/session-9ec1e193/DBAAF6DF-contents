####################################################################
##                                                                ##
##  CAUSAL ANALYSES progetto FORTE:  MLCM                         ##
##                                                                ##
##  Authors: Veronica Ballerini, Carolina Fiesoli, Giulio Grossi, ##
##           Fiammetta Menchetti                                  ##
##                                                                ##
##  Date last edited : January 2023                               ##
##                                                                ##
####################################################################

# Key question: what is the impact of FORTE funds on profitability
# and employees' efficiency? To answer that, we estimate the
# effect of the treatment ''receiving FORTE funds'' on some performance
# measures with the MLCM method 

# AIM: estimating the effect on 2020 
# LAGGED OUTCOME: we want to include Yt-1 among predictors
# PRE-INT: 2013-2017 

# Y: RENDIMENTO_DIPENDENTI_2020, EBITDA_2020, DEBT_EQUITY_RATIO_2020
# X: ANNO_COSTITUZIONE (trasformare in anni vita dell'azienda),
#    FORMA_GIURIDICA
#    GEO
#    DM_FEMMINILE
#    DM_UNDER_50
#    NO_OF_COMPANIES_IN_CORPORATE_GROUP
#    DIPENDENTI_*                   (time-varying)
#    COSTO_LAVORO_PER_ADDETTO_EUR_* (time-varying)
#    COSTI_RICERCA_PUBB_EUR_*       (time-varying)
#    DIRITTI_BREVETTO_IND_*         (time-varying)
#    TOTALE_IMMOB_IMM_*             (time-varying)

rm(list = ls())
wd <- "C:/Users/Menchetti/Documents/FORTE/Replication Package"
setwd(wd)

###################################################################
# Loading data, libraries & custom functions 
###################################################################

### Data
data <- read.csv(paste0(wd, "/Data/aida_merged_quest_07112023.csv"), sep = ",")
istat<- read.csv(paste0(wd, "/Data/dati_istat.csv"), sep = ";")

### Libraries
library(ggplot2)        # plots
library(grid)           # additional options (e.g., change title size) for gridExtra
library(gridExtra)      # arranging multiple ggplots
library(MachineControl) # causal effect estimation

### Custom functions 
source(paste0(wd, "/Functions/Generic_Fun.R"))
source(paste0(wd, "/Functions/Causal_Fun.R"))
source(paste0(wd, "/Functions/Plotting_Fun.R"))

### Check class
cl <- check_class(data) # Check OK, there are no num variables classified as char.

### MachineControl settings
int_date <- 2018
pcv_block <- 2
y.lag <- 2
nboot <- 2
gbmGrid <-  expand.grid(interaction.depth = c(1, 2), 
                        n.trees=c(1000, 2000), 
                        shrinkage = c(0.001, 0.002),
                        n.minobsinnode = c(5, 10))
bo <- list(method = "gbm",
           tuneGrid = gbmGrid)
pls <- list( method = "pls",
             tuneGrid = expand.grid(ncomp = c(1:10)),
             preProc=c("center", "scale"))
rf <- list(method = "rf",
           search = "grid",
           tuneGrid = expand.grid(mtry = 2:5),
           ntree=500)
ML_methods <- list(pls, rf)
ML_methods_2 <- list(pls, rf, bo)

###################################################################
# 0. Imputation 
###################################################################

# We impute the PRE-INTERVENTION missing data of the j-th company with the observed average 
# of other companies having the same number of employees and the same geographical
# area as the j-th company

### Y and X columns for the final analysis
cols <- c("ID", "ANNO_COSTITUZIONE2","CLAADD", "FORMA_GIURIDICA", "GEO", "DM_FEMMINILE", "DM_UNDER_50",
          "NO_OF_COMPANIES_IN_CORPORATE_GROUP", "TREAT",
          grep(colnames(data), pattern = "^RENDIMENTO_DIPENDENTI_\\d", value = T),
          grep(colnames(data), pattern = "^EBITDA_EUR_\\d", value = T),
          grep(colnames(data), pattern = "^DEBT_EQUITY_RATIO_\\d", value = T),
          grep(colnames(data), pattern = "^DIPENDENTI_\\d", value = T),
          grep(colnames(data), pattern = "COSTO_LAVORO_PER_ADDETTO_EUR_", value = T),
          grep(colnames(data), pattern = "COSTI_RICERCA_PUBB_EUR_", value = T),
          grep(colnames(data), pattern = "DIRITTI_BREVETTO_IND_", value = T),
          grep(colnames(data), pattern = "TOTALE_IMMOB_IMMATERIALI_", value = T))

### Checking NAs

# Step 1: Remove from the analysis firms with TREAT = NA (the training has not finished by 2020)
data <- data[!is.na(data$TREAT), ]

# Step 2: Impute PRE-INT missings from both X and Y, selecting cols to impute
#   (removing Y.2020 and Y.2021 but also Y.2010 and Y.2011, as the pre-int starts in 2013, so no need
#    to impute their NAs, they will be eliminated later on)  
to_remove <- c(paste0(rep(c("RENDIMENTO_DIPENDENTI_","EBITDA_EUR_","DEBT_EQUITY_RATIO_"), each = 2), c(2020,2021)),
               grep(cols, pattern = "_2010", value = T), grep(cols, pattern = "_2011", value = T))
to_impute <- setdiff(cols, to_remove) 
nas <- check_NA(data[, to_impute])
tab_nas <- data.frame(NUM.NAS = nas$na, PROP.NAS = round(100*nas$na.pp, digits = 1))
# write.table(tab_nas, "NAS.csv", sep =",")

# Results: the table reveals that DIRITTI_BREVETTO_IND and COSTI_RICERCA_PUBB have more than
# 50% of missing observations. We decide to eliminate those variables from our final dataset
# (and from the imputation exercise)
cols <- setdiff(cols, c(grep(cols, pattern = "BREVETTO", value = T), grep(cols, pattern = "RICERCA", value = T)))
to_impute <- setdiff(to_impute, c(grep(to_impute, pattern = "BREVETTO", value = T), grep(to_impute, pattern = "RICERCA", value = T)))
numX_varying <- length(unique(grep(to_impute, pattern = "_2012"))) # number of time-varying variables
  
### Step 3: Imputing
nas <- check_NA(data[, to_impute])
data <- impute_mean(data = data, cols = to_impute[which(nas$na != 0)], strati = c("CLAADD", "GEO"))

### Step 4: Checks
check_NA(data[, cols])$na
if(sum(check_NA(data[, to_impute])$na) > 0) stop("Something went wrong during imputation, there are still some NAs")


###################################################################
# 1. Building the analysis dataset
###################################################################

### 1.1. Reduced Dataset (only the outcomes and the needed covariates)
data_red <- data[, cols]

### 1.2. Reshaping 
data_long <- reshape(data_red, direction = "long", varying = split(cols[-c(1:9)], rep(seq(1:numX_varying), each = 12)),
                     v.names = unique(gsub(cols[-c(1:9)], pattern = "_\\d+", replacement = "")),
                     timevar = "Year", times = seq(from = 2010, to = 2021, by = 1), idvar = "ID")

### 1.3. Merging with Istat data
data_long <- merge(data_long, istat, by = "Year")

### 1.4. Removing 2010 and 2011 & ordering by ID
data_long <- data_long[!data_long$Year %in% c(2010,2011), ]
data_long <- data_long[order(data_long$ID), ]

### 1.5. Variables in thousands 
ind <- c("COSTO_LAVORO_PER_ADDETTO_EUR", "EBITDA_EUR", "TOTALE_IMMOB_IMMATERIALI_EUR")
data_long[, ind] <- apply(data_long[, ind], 2, FUN = function(x)(x/1000))

### 1.6. Checking class (defining factor variables)
cl <- check_class(data_long)
data_long[, c(cl$character$names)] <- as.data.frame(lapply(data_long[, c(cl$character$names)], FUN = as.factor))
cl<- check_class(data_long)
cl$factor$names
cl$character$chr

### 1.7. Transform 'ANNO_COSTITUZIONE' into 'NUM_YEARS_ACTIVITY'
data_long$NUM_YEARS_ACTIVITY <- 2020- data_long$ANNO_COSTITUZIONE2
data_long$ANNO_COSTITUZIONE2 <- NULL

### 1.8. Creating two datasets: one for treated (T) and one for controls (C)
dataT <- data_long[data_long$TREAT == 1, ]
dataC <- data_long[data_long$TREAT == 0, ]

rm(data)
rm(data_long)
gc()

###################################################################
# 2. Causal impact on RENDIMENTO_DIPENDENTI in 2020
################################################################### 

### 2.1. Data definition
data1T <- dataT[dataT$Year != 2021,]
ind <- c(grep(colnames(data1T), pattern = "EBITDA", value = T),
         grep(colnames(data1T), pattern = "DEBT_EQUITY", value = T),
         "TREAT")
data1T[, ind] <- NULL

data1C <- dataC[dataC$Year != 2021,]
ind <- c(grep(colnames(data1C), pattern = "EBITDA", value = T),
         grep(colnames(data1C), pattern = "DEBT_EQUITY", value = T),
         "TREAT")
data1C[, ind] <- NULL

### 2.2. Check NA's: remove firms having NA's in 2020 
indT <- which(is.na(data1T[data1T$Year == 2020, "RENDIMENTO_DIPENDENTI"])) # 40 NAs
indC <- which(is.na(data1C[data1C$Year == 2020, "RENDIMENTO_DIPENDENTI"])) # 36 NAs
data1T <- data1T[!data1T$ID %in% unique(data1T[, "ID"])[indT], ] 
data1C <- data1C[!data1C$ID %in% unique(data1C[, "ID"])[indC], ]

if(sum(check_NA(data1T)$na) > 0) stop("There are some NAs, something went wrong during the imputation")
if(sum(check_NA(data1C)$na) > 0) stop("There are some NAs, something went wrong during the imputation")

### 2.3. Evaluating 2020 impact with MachineControl

## 2.3.1. Treated units

# Data
newdata <- as.PanelMLCM(y = data1T[, "RENDIMENTO_DIPENDENTI"], timevar = data1T[, "Year"], id = data1T[, "ID"],
                        x = data1T[, !(names(data1T) %in% c("RENDIMENTO_DIPENDENTI", "ID", "Year"))], y.lag = y.lag)
# Panel Cross Validation
old <- Sys.time()
pcv <- PanelCrossValidation(data = newdata, int_date = int_date, pcv_block = pcv_block, ML_methods = ML_methods_2)
new <- Sys.time()
time_PCVT_REND <- new - old
# Estimation
old <- Sys.time()
causal <- MLCM(data = newdata, int_date = int_date, inf_type = "block", PCV = pcv$best, nboot = nboot, CATE = FALSE)
new <- Sys.time()
time_ESTT_REND <- new - old
# Saving
saveRDS(list(causal = causal, PCV = pcv), paste0(wd,"/ATET_REND_DIP.RDS"))

## 2.3.2. Control units

# Data
newdata <- as.PanelMLCM(y = data1C[, "RENDIMENTO_DIPENDENTI"], timevar = data1C[, "Year"], id = data1C[, "ID"],
                        x = data1C[, !(names(data1C) %in% c("RENDIMENTO_DIPENDENTI", "ID", "Year"))], y.lag = y.lag)
# Panel Cross Validation
old <- Sys.time()
pcv <- PanelCrossValidation(data = newdata, int_date = int_date, pcv_block = pcv_block, ML_methods = ML_methods_2)
new <- Sys.time()
time_PCVC_REND <- new - old
# Estimation
old <- Sys.time()
causal <- MLCM(data = newdata, int_date = int_date, inf_type = "block", PCV = pcv$best, nboot = nboot, CATE = FALSE)
new <- Sys.time()
time_ESTC_REND <- new - old
# Saving
saveRDS(list(causal = causal, PCV = pcv), paste0(wd,"/ATEC_REND_DIP.RDS"))

###################################################################
# 3. Causal impact on EBITDA 
###################################################################

### 3.1. Data definition
data1T <- dataT[dataT$Year != 2021,]
ind <- c(grep(colnames(data1T), pattern = "DEBT_EQUITY", value = T),
         grep(colnames(data1T), pattern = "RENDIMENTO_DIPENDENTI", value = T),
         "TREAT")
data1T[, ind] <- NULL

data1C <- dataC[dataC$Year != 2021,]
ind <- c(grep(colnames(data1C), pattern = "DEBT_EQUITY", value = T),
         grep(colnames(data1C), pattern = "RENDIMENTO_DIPENDENTI", value = T),
         "TREAT")
data1C[, ind] <- NULL

### 3.2. Check NA's: remove firms having NA's in 2020 
indT <- which(is.na(data1T[data1T$Year == 2020, "EBITDA_EUR"])) # 25 NAs
indC <- which(is.na(data1C[data1C$Year == 2020, "EBITDA_EUR"])) # 25 NAs
data1T <- data1T[!data1T$ID %in% unique(data1T[, "ID"])[indT], ] 
data1C <- data1C[!data1C$ID %in% unique(data1C[, "ID"])[indC], ]

if(sum(check_NA(data1T)$na) > 0) stop("There are some NAs, something went wrong during the imputation")
if(sum(check_NA(data1C)$na) > 0) stop("There are some NAs, something went wrong during the imputation")

### 3.3. Evaluating 2020 impact with MachineControl

## 3.3.1. Treated units

# Data
newdata <- as.PanelMLCM(y = data1T[, "EBITDA_EUR"], timevar = data1T[, "Year"], id = data1T[, "ID"],
                        x = data1T[, !(names(data1T) %in% c("EBITDA_EUR", "ID", "Year"))], y.lag = y.lag)
# Panel Cross Validation
old <- Sys.time()
pcv <- PanelCrossValidation(data = newdata, int_date = int_date, pcv_block = pcv_block, ML_methods = ML_methods_2)
new <- Sys.time()
time_PCVT_EBITDA <- new-old
# Estimation
old <- Sys.time()
causal <- MLCM(data = newdata, int_date = int_date, inf_type = "block", PCV = pcv$best, nboot = nboot, CATE = FALSE)
new <- Sys.time()
time_ESTT_EBITDA <- new-old
# Saving
saveRDS(list(causal = causal, PCV = pcv), paste0(wd,"/ATET_EBITDA.RDS"))

## 2.3.2. Control units

# Data
newdata <- as.PanelMLCM(y = data1C[, "EBITDA_EUR"], timevar = data1C[, "Year"], id = data1C[, "ID"],
                        x = data1C[, !(names(data1C) %in% c("EBITDA_EUR", "ID", "Year"))], y.lag = y.lag)
# Panel Cross Validation
old <- Sys.time()
pcv <- PanelCrossValidation(data = newdata, int_date = int_date, pcv_block = pcv_block, ML_methods = ML_methods_2)
new <- Sys.time()
time_PCVC_EBITDA <- new-old
# Estimation
old <- Sys.time()
causal <- MLCM(data = newdata, int_date = int_date, inf_type = "block", PCV = pcv$best, nboot = nboot, CATE = FALSE)
new <- Sys.time()
time_ESTC_EBITDA <- new-old
# Saving
saveRDS(list(causal = causal, PCV = pcv), paste0(wd,"/ATEC_EBITDA.RDS"))

###################################################################
# 4. Causal impact on DEBT_EQUITY 
###################################################################

### 4.1. Data definition
data1T <- dataT[dataT$Year != 2021,]
ind <- c(grep(colnames(data1T), pattern = "EBITDA", value = T),
         grep(colnames(data1T), pattern = "RENDIMENTO_DIPENDENTI", value = T),
         "TREAT")
data1T[, ind] <- NULL

data1C <- dataC[dataC$Year != 2021,]
ind <- c(grep(colnames(data1C), pattern = "EBITDA", value = T),
         grep(colnames(data1C), pattern = "RENDIMENTO_DIPENDENTI", value = T),
         "TREAT")
data1C[, ind] <- NULL

### 4.2. Check NA's: remove firms having NA's in 2020 
indT <- which(is.na(data1T[data1T$Year == 2020, "DEBT_EQUITY_RATIO"])) # 415 NAs
indC <- which(is.na(data1C[data1C$Year == 2020, "DEBT_EQUITY_RATIO"])) # 153 NAs
data1T <- data1T[!data1T$ID %in% unique(data1T[, "ID"])[indT], ] 
data1C <- data1C[!data1C$ID %in% unique(data1C[, "ID"])[indC], ]

if(sum(check_NA(data1T)$na) > 0) stop("There are some NAs, something went wrong during the imputation")
if(sum(check_NA(data1C)$na) > 0) stop("There are some NAs, something went wrong during the imputation")

### 4.3. Evaluating 2020 impact with MachineControl

## 4.3.1. Treated units

# Data
newdata <- as.PanelMLCM(y = data1T[, "DEBT_EQUITY_RATIO"], timevar = data1T[, "Year"], id = data1T[, "ID"],
                        x = data1T[, !(names(data1T) %in% c("DEBT_EQUITY_RATIO", "ID", "Year"))], y.lag = y.lag)
# Panel Cross Validation
old <- Sys.time()
pcv <- PanelCrossValidation(data = newdata, int_date = int_date, pcv_block = pcv_block, ML_methods = ML_methods_2)
new <- Sys.time()
time_PCVT_DEBT <- new-old
# Estimation
old <- Sys.time()
causal <- MLCM(data = newdata, int_date = int_date, inf_type = "block", PCV = pcv$best, nboot = nboot, CATE = FALSE)
new <- Sys.time()
time_ESTT_DEBT <- new-old
# Saving
saveRDS(list(causal = causal, PCV = pcv), paste0(wd,"/ATET_DEBT.RDS"))

## 4.3.2. Control units

# Data
newdata <- as.PanelMLCM(y = data1C[, "DEBT_EQUITY_RATIO"], timevar = data1C[, "Year"], id = data1C[, "ID"],
                        x = data1C[, !(names(data1C) %in% c("DEBT_EQUITY_RATIO", "ID", "Year"))], y.lag = y.lag)
# Panel Cross Validation
old <- Sys.time()
pcv <- PanelCrossValidation(data = newdata, int_date = int_date, pcv_block = pcv_block, ML_methods = ML_methods_2)
new <- Sys.time()
time_PCVC_DEBT <- new-old
# Estimation
old <- Sys.time()
causal <- MLCM(data = newdata, int_date = int_date, inf_type = "block", PCV = pcv$best, nboot = nboot, CATE = FALSE)
new <- Sys.time()
time_ESTC_DEBT <- new-old
# Saving
saveRDS(list(causal = causal, PCV = pcv), paste0(wd,"/ATEC_DEBT.RDS"))

