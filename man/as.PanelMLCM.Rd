% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mlcm.R
\name{as.PanelMLCM}
\alias{as.PanelMLCM}
\title{Structuring the panel dataset}
\usage{
as.PanelMLCM(y, x, timevar, id, int_date = NULL, y.lag = 0, fe = FALSE)
}
\arguments{
\item{y}{Numeric, the outcome variable.}

\item{x}{Matrix or data.frame of covariates to include in the model.}

\item{timevar}{The column containing the time variable. It can be \code{numeric}, \code{integer} or
\code{Date}.}

\item{id}{Numeric, the column containing the ID's.}

\item{int_date}{Optional, only needed in staggered adoption setting to identify the column
reporting the dates of intervention.}

\item{y.lag}{Optional, number of lags of the dependent variable to include in the model.}

\item{fe}{Logical, whether to include fixed effects dummy variables. Defaults to false.}
}
\value{
An object of class 'data.frame' and 'PanelMLCM'.
}
\description{
This function takes as input the panel dataset given by the user and changes the
ordering and the names of the columns to obtain an object of class 'PanelMLCM'
to be used by the function 'MLCM'.
}
\details{
This function is mainly for internal use of \code{MLCM}. It is exported to give
users full flexibility in the choice of the ML algorithms and during the panel cross validation.
See the documentation of the function \code{PanelCrossValidation} or, for a staggered adoption
setting, \code{PanelCrossValidationMulti}.

If \code{fe = TRUE}, N-1 dummy variables will be added to the dataset, where N is the total number
of units in the panel).
}
\examples{

# Example 1. Start from a disorganized panel dataset
head(data)

# Run as.PanelMLCM
newdata <- as.PanelMLCM(y = data[, "Y"], timevar = data[, "year"], id = data[, "ID"],
                        x = data[, !(names(data) \%in\% c("Y", "ID", "year"))], y.lag = 2)

# Results
head(newdata)

# Example 2. Disorganized panel dataset in a staggered adoption setting

# Assume the following intervention dates
int_year_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_year <- rep(int_year_i, each = length(unique(data$year)))

# Define data_stag
data_stag <- data.frame(int_year, data)

# Organizing the dataset with as.PanelMLCM
newdata <- as.PanelMLCM(y = data_stag[, "Y"], timevar = data_stag[, "year"], id = data_stag[, "ID"],
                       int_date = data_stag[, "int_year"],
                       x = data_stag[, !(names(data_stag) \%in\% c("Y", "ID", "year", "int_year"))], y.lag = 2)
# Results
head(newdata)

}
