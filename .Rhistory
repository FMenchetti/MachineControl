x2 = 2*rnorm(200), x3 = sample(1:5, size = 200, replace = TRUE))
# Estimation
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
# CATE
fit$cate.inf
colnames(data_cate)
colnames(x.cate)
# Simulating time-varying external regressors
x.cate <- cbind(ID = rep(1:100, each = 2), year = rep(2019:2020, times = 100), x1 = rnorm(200),
x2 = 2*rnorm(200), x3 = sample(1:5, size = 200, replace = TRUE))
# Estimation
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
# Simulating time-varying external regressors
x.cate <- cbind(ID = rep(1:100, each = 2), year = rep(2019:2020, times = 100), x1 = rnorm(200),
x2 = 2*rnorm(200), x3 = sample(1:5, size = 200, replace = TRUE))
# Estimation
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
# CATE
fit$cate.inf
colnames(x.cate)
# Simulating time-varying external regressors
x.cate <- cbind(ID = rep(1:100, each = 2), year = rep(2019:2020, times = 100), x1 = rnorm(200),
x2 = 2*rnorm(200), x3 = sample(1:5, size = 200, replace = TRUE))
# Estimation
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
# CATE
fit$cate.inf
x.cate <- check_xcate(x.cate = x.cate, data = data, id = id, timevar = timevar)
colnames(x.cate)
# Simulating time-varying external regressors
x.cate <- cbind(ID = rep(1:100, each = 2), year = rep(2019:2020, times = 100), x1 = rnorm(200),
x2 = 2*rnorm(200), x3 = sample(1:5, size = 200, replace = TRUE))
# Estimation
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
# CATE
fit$cate.inf
View(x.cate)
# Simulating time-varying external regressors
x.cate <- cbind(ID = rep(1:100, each = 2), year = rep(2019:2020, times = 100), x1 = rnorm(200),
x2 = 2*rnorm(200), x3 = sample(1:5, size = 200, replace = TRUE))
# Estimation
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
# CATE
fit$cate.inf
colnames(x.cate)
x.cate <- cbind(ID = rep(1:100, each = 2), year = rep(2019:2020, times = 100), x1 = rnorm(200),
x2 = 2*rnorm(200), x3 = sample(1:5, size = 200, replace = TRUE))
# Estimation
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
x.cate <- cbind(ID = rep(1:100, each = 2), year = rep(2019:2020, times = 100), x1 = rnorm(200),
x2 = 2*rnorm(200), x3 = sample(1:5, size = 200, replace = TRUE))
# Estimation
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
# CATE
fit$cate.inf
library(devtools)
# Assume the following intervention dates
int_year_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_year <- rep(int_year_i, each = length(unique(data$year)))
# Define data_stag
data_stag <- data.frame(int_year, data)
fit <- MLCM(data = data_stag, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "block", nboot = 10, y.lag = 2)
fit$global_ate
names(fit)
int_year_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_year <- rep(int_year_i, each = length(unique(data$year)))
data_stag <- data.frame(int_year, data)
View(data_stag)
fit <- MLCM(data = data_stag, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "block", nboot = 10, y.lag = 2)
int_year_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_year <- rep(int_year_i, each = length(unique(data$year)))
# Define data_stag
data_stag <- data.frame(int_year, data)
# Estimation
fit <- MLCM(data = data_stag, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "block", nboot = 10, y.lag = 2)
class(ate_i)
lenght(ate_i)
length(ate_i)
ate_i[[1]]$ate
View(ate_i[[1]]$ind_effects)
colMeans(ate_i[[1]]$ind_effects)
int_year_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_year <- rep(int_year_i, each = length(unique(data$year)))
# Define data_stag
data_stag <- data.frame(int_year, data)
# Estimation
fit <- MLCM(data = data_stag, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "block", nboot = 10, y.lag = 2)
boot_inf[[1]]$conf.ate
View(boot_inf[[1]]$ate_boot)
View(ta_ind_effects)
colMeans(ta_ind_effects[ta_ind_effects$int_date == 2019])
colMeans(ta_ind_effects[ta_ind_effects$int_date == 2019,])
colMeans(ta_ind_effects[ta_ind_effects$int_date == 2020,])
ate_i[[1]]$ate
global_ate
mean(ta_ind_effects$temp.avg)
names(ate_i) <- paste0("int_", nint)
names(ate_i)
names(boot_inf) <- paste0("int_", nint)
int_year_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_year <- rep(int_year_i, each = length(unique(data$year)))
# Define data_stag
data_stag <- data.frame(int_year, data)
# Estimation
fit <- MLCM(data = data_stag, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "block", nboot = 10, y.lag = 2)
fit$global_ate
fit$group_ate$int_2019$ate
fit$group_ate$int_2020$ate
(80.02975 + 61.31385 - 106.4981)/3
(80.02975 + (61.31385 - 106.4981)/2)/3
((80.02975 - 106.4981)/2) + 61.31385)/3
(((80.02975 - 106.4981)/2) + 61.31385)/3
mean(sapply(fit$group_ate, FUN = function(x)(mean(x$ate))))
((80.02975 + 61.31385)/2 - 106.4981 )/2
sapply(fit$group_ate, FUN = function(x)(x$ate))
unlist(sapply(fit$group_ate, FUN = function(x)(x$ate)))
sum(unlist(sapply(fit$group_ate, FUN = function(x)(x$ate))))/6
sum(unlist(sapply(fit$group_ate, FUN = function(x)(x$ate))))
identical(fit$global_ate, mean(sapply(fit$group_ate, FUN = function(x)(mean(x$ate)))))
View(fit$tempavg_ind_effects)
View(fit$group_ate$int_2019$ind_effects)
View(fit$group_ate$int_2020$ind_effects)
head(colMeans(fit$group_ate$int_2019$ind_effects),10)
head(colMeans(fit$group_ate$int_2019$ind_effects[, "2019"]),10)
head(colMeans(fit$group_ate$int_2019$ind_effects[, c("2019", "2020")]),10)
head(rowMeans(fit$group_ate$int_2019$ind_effects[, c("2019", "2020")]),10)
head(fit$tempavg_ind_effects[,2])
head(fit$tempavg_ind_effects[,"temp.avg"])
temp_avg_individual_effects <- fit$tempavg_ind_effects[,"temp.avg"]
mean_ind_effects <- fit$group_ate$int_2019$ind_effects[, c("2019", "2020")]
identical(temp_avg_individual_effects, mean_ind_effects)
head(temp_avg_individual_effects)
head(mean_ind_effects)
temp_avg_individual_effects <- fit$tempavg_ind_effects[,"temp.avg"]
mean_ind_effects <- rowMeans(fit$group_ate$int_2019$ind_effects[, c("2019", "2020")])
identical(temp_avg_individual_effects, mean_ind_effects)
head(mean_ind_effects)
head(temp_avg_individual_effects)
temp_avg_individual_effects <- fit$tempavg_ind_effects[,"temp.avg"]
mean_ind_effects <- rowMeans(fit$group_ate$int_2019$ind_effects[, c("2019", "2020")])
all_equal(temp_avg_individual_effects, mean_ind_effects)
temp_avg_individual_effects <- fit$tempavg_ind_effects[,"temp.avg"]
mean_ind_effects <- rowMeans(fit$group_ate$int_2019$ind_effects[, c("2019", "2020")])
all.equal(temp_avg_individual_effects, mean_ind_effects)
temp_avg_individual_effects <- fit$tempavg_ind_effects[fit$tempavg_ind_effects==2019,"temp.avg"]
temp_avg_individual_effects <- fit$tempavg_ind_effects[fit$tempavg_ind_effects$int_date==2019,"temp.avg"]
temp_avg_individual_effects <- fit$tempavg_ind_effects[fit$tempavg_ind_effects$int_date == 2019,"temp.avg"]
mean_ind_effects <- rowMeans(fit$group_ate$int_2019$ind_effects[, c("2019", "2020")])
identical(temp_avg_individual_effects, mean_ind_effects)
temp_avg_individual_effects <- fit$tempavg_ind_effects[fit$tempavg_ind_effects$int_date == 2020,"temp.avg"]
mean_ind_effects <- fit$group_ate$int_2020$ind_effects[, "2020"]
identical(temp_avg_individual_effects, mean_ind_effects)
length(fit$tempavg_ind_effects[fit$tempavg_ind_effects$int_date == 2019, "temp.avg"])
mean(fit$tempavg_ind_effects[fit$tempavg_ind_effects$int_date == 2019, "temp.avg"])
mean(fit$tempavg_ind_effects[fit$tempavg_ind_effects$int_date == 2020, "temp.avg"])
(70.6718 -106.4981)/2
fit$global_ate
mean(fit$tempavg_ind_effects$temp.avg)
unit_avg_effect_coorte1 <- mean(fit$tempavg_ind_effects[fit$tempavg_ind_effects$int_date == 2019, "temp.avg"])
unit_avg_effect_coorte2 <- mean(fit$tempavg_ind_effects[fit$tempavg_ind_effects$int_date == 2020, "temp.avg"])
(unit_avg_effect_coorte1 + unit_avg_effect_coorte2)/2
fit$global_ate
30*0.9+20*0.1
weighted.mean(c(30,20), w = c(0.9,0.1))
int_year_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_year <- rep(int_year_i, each = length(unique(data$year)))
# Define data_stag
data_stag <- data.frame(int_year, data)
# Estimation
fit <- MLCM(data = data_stag, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "block", nboot = 10, y.lag = 2)
names(ate_i)
ate_i$int_2019$ate
sapply(ate_i, FUN = function(x)(mean(x$ate)))
(80.02975 + 61.31385)/2
nint
table(data_panel$int_date)
sapply(nint, FUN = function(x)(sum(data_panel$int_date == x)))
table(data_panel$int_date)/length(unique(data_panel$ID))
length(unique(data_panel$ID))
unique(data_panel$ye)
unique(data_panel$Time)
table(data_panel$int_date)/nrow(data_panel)
class(table(data_panel$int_date)/nrow(data_panel))
as.numeric(table(data_panel$int_date)/nrow(data_panel))
sapply(ate_i, FUN = function(x)(mean(x$ate)))
70.6718*0.6-106.4981*0.4
weighted.mean(sapply(ate_i, FUN = function(x)(mean(x$ate))), w = weights)
weights <- as.numeric(table(data_panel$int_date)/nrow(data_panel))
global_ate <- weighted.mean(sapply(ate_i, FUN = function(x)(mean(x$ate))), w = weights)
global_ate
int_year_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_year <- rep(int_year_i, each = length(unique(data$year)))
# Define data_stag
data_stag <- data.frame(int_year, data)
# Estimation
fit <- MLCM(data = data_stag, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "block", nboot = 10, y.lag = 2)
sapply(boot_inf, FUN = function(x)(colMeans(x$ate_boot)))
rowMeans(sapply(boot_inf, FUN = function(x)(colMeans(x$ate_boot))))
apply(sapply(boot_inf, FUN = function(x)(colMeans(x$ate_boot))), 1, weighted.mean, w = weights)
73.23248*0.6 -101.41597*0.4
68.21637*0.6 -118.06528*0.4
# Assume the following intervention dates
int_year_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_year <- rep(int_year_i, each = length(unique(data$year)))
# Define data_stag
data_stag <- data.frame(int_year, data)
# Estimation
fit <- MLCM(data = data_stag, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "block", nboot = 10, y.lag = 2)
fit$global_ate
fit$conf.global.ate
newdata <- as.PanelMLCM(y = data[, "Y"], timevar = data[, "year"], id = data[, "ID"],
x = data[, !(names(data) %in% c("Y", "ID", "year"))], y.lag = 2, fe = T)
newdata <- as.PanelMLCM(y = data[, "Y"], timevar = data[, "year"], id = data[, "ID"],
x = data[, !(names(data) %in% c("Y", "ID", "year"))], y.lag = 2)
newdata <- as.PanelMLCM(y = data[, "Y"], timevar = data[, "year"], id = data[, "ID"],
x = data[, !(names(data) %in% c("Y", "ID", "year"))], y.lag = 2, fe = T)
View(panel)
prova <- sapply(ids, FUN = function(x){ind <- grep(colnames(panel), pattern = x)
panel[panel$ID == x, ind] <- 1})
x <- ids[1]
ind <- grep(colnames(panel), pattern = x)
grep(colnames(panel), pattern = x, value = T)
prova <- sapply(1:length(ids), FUN = function(i){
panel[panel$ID == i, names[i]] <- 1})
prova <- sapply(1:length(ids), FUN = function(i){
panel[panel$ID == i, names[i]] <- 1}, simplify = T)
prova <- sapply(1:length(ids), FUN = function(i){
panel[panel$ID == i, names[i]] <- 1}, simplify = F)
prova <- sapply(ids, FUN = function(x){ind <- paste0("FE_",x)
panel[panel$ID == x, ind] <- 1}, simplify = T)
x <- ids[1]
x
ind <- paste0("FE_",x)
ind
dim(panel[panel$ID == x, ind])
sum(panel$ID==x)
`length(panel[panel$ID == x, ind])
)
)
''
'
``
`
length(panel[panel$ID == x, ind])
View(panel)
panel[panel$ID == x, ind] <- 1
View(panel)
prova <- sapply(ids, FUN = function(x){ind <- paste0("FE_",x)
panel[panel$ID == x, ind] <- 1; panel}, simplify = T)
View(prova)
dim(prova)
View(prova)
prova <- model.matrix(~factor(panel$ID)-1)
View(prova)
prova <- model.matrix(~factor(panel$ID[-1]))
View(prova)
prova <- model.matrix(~factor(panel$ID[-1]) - 1)
View(prova)
for(i in ids){panel[panel$ID == i, paste0("FE_",i)] <- 1}
newdata <- as.PanelMLCM(y = data[, "Y"], timevar = data[, "year"], id = data[, "ID"],
x = data[, !(names(data) %in% c("Y", "ID", "year"))], y.lag = 2, fe = T)
View(dm)
newdata <- as.PanelMLCM(y = data[, "Y"], timevar = data[, "year"], id = data[, "ID"],
x = data[, !(names(data) %in% c("Y", "ID", "year"))], y.lag = 2, fe = T)
View(newdata)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, y.lag = 2, fe = T)
View(data_panel)
best$method
best$bestTune
best$results
ate
View(ii)
ind <- NULL
View(data[, -ind])
head(data[, -ind])
i <- ii[1,]
head(i)
unique(data[i, "ID"])
nd <- paste0("FE_", unique(data[i, "ID"]))
View(data)
data_boot <- data[c(i, post), -ind]
ind <- paste0("FE_", unique(data[i, "ID"]))
data_boot <- data[c(i, post), -ind]
ind <- paste0("FE_", unique(data[i, "ID"]))
data_boot <- data[c(i, post), ]
View(data_boot)
data_boot[, ind] <- NULL
View(data_boot)
View(as.data.frame(unique(data[i, "ID"])))
View(data)
View(data_boot)
View(data_boot)
View(as.data.frame(unique(data[i, "ID"])))
inn <- paste0("FE_", unique(data[i, "ID"]))
out <- which(!grep(colnames(data), pattern = "FE_", value = T) %in% inn)
data_boot <- data[c(i, post), ]
data_boot[, out] <- NULL
View(data_boot)
c(1,2)
inn <- paste0("FE_", unique(data[i, "ID"]))
out <- setdiff(grep(colnames(data), pattern = "FE_", value = T), inn)
data_boot <- data[c(i, post), ]
data_boot[, out] <- NULL
View(data_boot)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019, nboot = 10, y.lag = 2, fe = T)
View(ii0)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019, nboot = 10, y.lag = 2, fe = T)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019, nboot = 10, y.lag = 2, fe = T)
fit$ate
fit$conf.ate
View(fit$ate.boot)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019, nboot = 10, y.lag = 2, fe = T)
inn <- paste0("FE_", ind1[[3]])
out <- setdiff(grep(colnames(data), pattern = "FE_", value = T), inn)
data_boot <- data[c(ii0[[3]], post), ]
data_boot[, out] <- NULL
View(data_boot)
prova <- ate_est(data = data_boot, int_date = int_date, best = bestt, metric = metric, ran.err = TRUE, y.lag = y.lag)}
prova <- ate_est(data = data_boot, int_date = int_date, best = bestt, metric = metric, ran.err = TRUE, y.lag = y.lag)
prova$ate
View(prova$ind_effects)
bestt$method
fit$best_method$finalModel
fit$best_method$bestTune
fit$best_method$method
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, y.lag = 2, fe = T)
fit$ate
fit$conf.ate
int_year_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_year <- rep(int_year_i, each = length(unique(data$year)))
# Define data_stag
data_stag <- data.frame(int_year, data)
# Estimation
fit <- MLCM(data = data_stag, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "block", nboot = 10, y.lag = 2)
fit$global_ate
fit$group_ate$int_2019
fit$group_ate$int_2019$ate
fit$group_ate$int_2020$ate
0.6*((80.02975 + 61.31385)/2)+0.4*(-106.4981)
(-0.09107769 - 0.12623644 - 0.14339515 - 0.13418066)/4
(0.007400216 - 0.021948465)/2
-0.1237225*100/907 -0.007274124*223/907 - 0.02250137*584/907
(-0.1237225 -0.007274124 - 0.02250137)/3
A <- mean(c(-0.09107769, -0.12623644, - 0.14339515, - 0.13418066))
B <- mean(c(0.007400216, - 0.021948465))
C <- - 0.02250137
wa <- 100/907
wb <- 223/907
wc <- 584/907
wa+wb+wc
weighted.mean(c(A,B,C), w = c(wa,wb,wc))
int_year_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_year <- rep(int_year_i, each = length(unique(data$year)))
# Define data_stag
data_stag <- data.frame(int_year, data)
# Estimation
fit <- MLCM(data = data_stag, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "block", nboot = 10, y.lag = 2)
fit$global_ate
fit$group_ate$int_2019$ate
fit$group_ate$int_2020$ate
((80.02975 + 61.31385)/2)*0.6 + (-106.4981)*0.4
data <- read.csv("C:\\Users\\fiamm\\Downloads\\cs_mlcm.csv")
#data <- read.csv("G:\\Drive condivisi\\MLCM\\replication CS 2021\\cs_mlcm.csv")
names(data)
# Organizing the dataset with as.PanelMLCM
newdata <- as.PanelMLCM(y = data[, "lemp"], timevar = data[, "year"], id = data[, "countyreal"],
int_date = data[, "firsttreat"],
x = data[, !(names(data) %in% c("lemp", "countyreal", "year", "firsttreat"))], y.lag = 1)
#lm <- list(method = "lm",  tuneGrid = expand.grid(intercept=TRUE))
#gbmGrid <-  expand.grid(interaction.depth = c(1),
# n.trees=c(500),
# shrinkage = c(0.0001),
#  n.minobsinnode = c(10))
# gbm <- list(method="gbm", tuneGrid = gbmGrid)
rf <- list(method="rf", tuneGrid = expand.grid(mtry = c(3,6,9)), ntree=1000)
lambda <- 10^seq(-1000, 1000, length = 100)
lasso <- list(method="glmnet", tuneGrid = expand.grid(alpha = 1, lambda = lambda))
pcv <- PanelCrossValidationMulti(data = newdata, ML_methods = list(lasso, rf))
fit <- MLCM(data = newdata, int_date = "int_date",
inf_type = "block", nboot = 1000, CATE = FALSE, PCV=pcv, y.lag=1)
ate_i$int_2004
weights
table(data$int_date)
table(data$int_date)/6
sum(table(data$int_date)/6)
(table(data$int_date)/6)/907
weights
sapply(ate_i, FUN = function(x)(mean(x$ate)))
names(ate_i)
ate_i$int_2007
ate_i$int_2006$ate
weights
nint
View(data_panel)
table(data_panel$int_date)
unique(data_panel$int_date)
tapply(data_panel$int_date, data_panel$int_date, length)
aggregate(data_panel$int_date, by = list(data_panel$int_date), FUN = length)$x
# Organizing the dataset with as.PanelMLCM
newdata <- as.PanelMLCM(y = data[, "lemp"], timevar = data[, "year"], id = data[, "countyreal"],
int_date = data[, "firsttreat"],
x = data[, !(names(data) %in% c("lemp", "countyreal", "year", "firsttreat"))], y.lag = 1)
View(panel)
View(panel)
rf <- list(method="rf", tuneGrid = expand.grid(mtry = c(3,6,9)), ntree=1000)
lambda <- 10^seq(-1000, 1000, length = 100)
lasso <- list(method="glmnet", tuneGrid = expand.grid(alpha = 1, lambda = lambda))
pcv <- PanelCrossValidationMulti(data = newdata, ML_methods = list(lasso, rf))
fit <- MLCM(data = newdata, int_date = "int_date",
inf_type = "block", nboot = 1000, CATE = FALSE, PCV=pcv, y.lag=1)
ate_i$int_2004$ate
ate_i$int_2006$ate
ate_i$int_2007$ate
weights
global_ate
gc()
rm(list=ls())
library(MachineControl)
set.seed(1)
data <- read.csv("C:\\Users\\fiamm\\Downloads\\cs_mlcm.csv")
#data <- read.csv("G:\\Drive condivisi\\MLCM\\replication CS 2021\\cs_mlcm.csv")
names(data)
# Organizing the dataset with as.PanelMLCM
newdata <- as.PanelMLCM(y = data[, "lemp"], timevar = data[, "year"], id = data[, "countyreal"],
int_date = data[, "firsttreat"],
x = data[, !(names(data) %in% c("lemp", "countyreal", "year", "firsttreat"))], y.lag = 1)
#lm <- list(method = "lm",  tuneGrid = expand.grid(intercept=TRUE))
#gbmGrid <-  expand.grid(interaction.depth = c(1),
# n.trees=c(500),
# shrinkage = c(0.0001),
#  n.minobsinnode = c(10))
# gbm <- list(method="gbm", tuneGrid = gbmGrid)
rf <- list(method="rf", tuneGrid = expand.grid(mtry = c(3,6,9)), ntree=1000)
lambda <- 10^seq(-1000, 1000, length = 100)
lasso <- list(method="glmnet", tuneGrid = expand.grid(alpha = 1, lambda = lambda))
pcv <- PanelCrossValidationMulti(data = newdata, ML_methods = list(lasso, rf))
fit <- MLCM(data = newdata, int_date = "int_date",
inf_type = "block", nboot = 1000, CATE = FALSE, PCV=pcv, y.lag=1)
fit$global_ate
fit$conf.global.ate
fit$best_method
rm(list=ls())
library(MachineControl)
set.seed(1)
data <- read.csv("C:\\Users\\fiamm\\Downloads\\cs_mlcm.csv")
#data <- read.csv("G:\\Drive condivisi\\MLCM\\replication CS 2021\\cs_mlcm.csv")
names(data)
# Organizing the dataset with as.PanelMLCM
newdata <- as.PanelMLCM(y = data[, "lemp"], timevar = data[, "year"], id = data[, "countyreal"],
int_date = data[, "firsttreat"],
x = data[, !(names(data) %in% c("lemp", "countyreal", "year", "firsttreat"))], y.lag = 1)
View(newdata)
rf <- list(method="rf", tuneGrid = expand.grid(mtry = c(3,6,9)), ntree=1000)
lambda <- 10^seq(-1000, 1000, length = 100)
lasso <- list(method="glmnet", tuneGrid = expand.grid(alpha = 1, lambda = lambda))
pcv <- PanelCrossValidationMulti(data = newdata, ML_methods = list(lasso, rf))
fit <- MLCM(data = newdata, int_date = "int_date",
inf_type = "block", nboot = 1000, CATE = FALSE, PCV=pcv, y.lag=1)
weights
weights/nrow(data_panel)
weights <- sapply(unique(data_panel$int_date), FUN = function(x)(sum(data_panel$int_date == x)))/nrow(data_panel)
weights
# weights <- as.numeric(table(data_panel$int_date)/nrow(data_panel))
global_ate <- weighted.mean(sapply(ate_i, FUN = function(x)(mean(x$ate))), w = weights)
rm(list=ls())
library(MachineControl)
set.seed(1)
data <- read.csv("C:\\Users\\fiamm\\Downloads\\cs_mlcm.csv")
#data <- read.csv("G:\\Drive condivisi\\MLCM\\replication CS 2021\\cs_mlcm.csv")
names(data)
# Organizing the dataset with as.PanelMLCM
newdata <- as.PanelMLCM(y = data[, "lemp"], timevar = data[, "year"], id = data[, "countyreal"],
int_date = data[, "firsttreat"],
x = data[, !(names(data) %in% c("lemp", "countyreal", "year", "firsttreat"))], y.lag = 1)
#lm <- list(method = "lm",  tuneGrid = expand.grid(intercept=TRUE))
#gbmGrid <-  expand.grid(interaction.depth = c(1),
# n.trees=c(500),
# shrinkage = c(0.0001),
#  n.minobsinnode = c(10))
# gbm <- list(method="gbm", tuneGrid = gbmGrid)
rf <- list(method="rf", tuneGrid = expand.grid(mtry = c(3,6,9)), ntree=1000)
lambda <- 10^seq(-1000, 1000, length = 100)
lasso <- list(method="glmnet", tuneGrid = expand.grid(alpha = 1, lambda = lambda))
pcv <- PanelCrossValidationMulti(data = newdata, ML_methods = list(lasso, rf))
fit <- MLCM(data = newdata, int_date = "int_date",
inf_type = "block", nboot = 1000, CATE = FALSE, PCV=pcv, y.lag=1)
fit$global_ate
fit$best_method
fit$conf.global.ate
unique(newdata$int_date)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, y.lag = 2)
