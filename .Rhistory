inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
library(MachineControl)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
View(data_cate)
View(data_cate)
View(data_cate)
View(data_cate[data_cate$Time == 2019,])
View(mat)
library(MachineControl)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
class(cate)
class(cate.inf)
class(cate[[1]])
class(cate.inf[[1]])
cate.inf[[1]]
library(MachineControl)
library(MachineControl)
library(MachineControl)
library(MachineControl)
install.packages("caret")
install.packages("CAST")
3.99*24
install.packages("pls")
install.packages("elasticnet")
install.packages("gbm")
install.packages("randomForest")
install.packages("bcaboot")
head(data)
newdata <- as.PanelMLCM(y = data[, "Y"], timevar = data[, "year"], id = data[, "ID"],
x = data[, !(names(data) %in% c("Y", "ID", "year"))], y.lag = 2)
# Results
head(newdata)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019, nboot = 10, y.lag = 2)
sessionInfo()
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, y.lag = 2)
fit$ate
fit$conf.ate
fit$ind.effects
fit$conf.individual
wd <- "H:/Il mio Drive/TESI/Martina"
setwd(wd)
### Data, libraries, functions
data <- read.csv("archivio_2024_pre_imputazione_aggiornato.csv", header = T, sep = ";")
# how many n.d.?
sum(data == "n.d.", na.rm = T)
prova <- mapply(data, FUN = function(x){
ind <- which(x == "n.d.")
x[ind] <- 999999999
}, SIMPLIFY = T)
prova <- lapply(data, FUN = function(x){
ind <- which(x == "n.d.")
x[ind] <- 999999999
})
class(prova[[1]])
length(prova[[1]])
prova[[1]]
prova <- lapply(1:ncol(data), FUN = function(i){
ind <- which(data[,i] == "n.d.")
data[ind,i] <- 999999999
})
length(prova[[1]])
prova[[1]]
prova[[81]]
which(data[,1] == "n.d.")
ind <- which(data[,81] == "n.d.")
data[ind,i] <- 999999999
data[ind,81] <- 999999999
which(data[,81] == "n.d.")
for(i in 1:ncol(data)){
ind <- which(data[,i] == "n.d.")
data[ind, i] <- 999999999
}
sum(data == "n.d.", na.rm = T)
sum(data == 999999999, na.rm = T)
class(data[,81])
rm(list = ls())
setwd("H:/Il mio Drive/IRPET")
### Data, libraries, functions
data <- read.csv("archivio_2024_pre_imputazione_aggiornato.csv", header = T, sep = ";")
# how many n.d.?
nnd <- sum(data == "n.d.", na.rm = T)
# assign 999999999 label to n.d.
for(i in 1:ncol(data)){
ind <- which(data[,i] == "n.d.")
data[ind, i] <- 999999999
}
# check
if(sum(data == 999999999, na.rm = T) == nnd){
print("check OK")} else {
stop("Il numero di nuovi labels Ã¨ diverso")
}
# Functions
source("Generic_Fun.R")
cl <- check_class(data)
cl$numeric
cl$character
nas <- check_NA(data)
nas$na
nas$na.pp #
nas$na.summary
newdata <- as.PanelMLCM(y = data[, "Y"], timevar = data[, "year"], id = data[, "ID"],
x = data[, !(names(data) %in% c("Y", "ID", "year"))], y.lag = 2)
View(newdata)
length(unique(newdata$ID))
unique(newdata$Time)
int_date <- rep(c(2019,2020), each = c(3,7))
rep(c(2019,2020), each = 3)
int_date <- c(rep(2019, times = 20), rep(c(2019,2020), each = 40))
int_date
int_date_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_date <- rep(int_date, each = unique(newdata$Time))
int_date_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_date <- rep(int_date, each = length(unique(newdata$Time)))
length(int_date)
dim(newdata)
length(unique(newdata$Time))
length(int_date_i)
length(int_date)
int_date_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_date <- rep(int_date_i, each = length(unique(newdata$Time)))
length(int_date)
View(cbind(newdata, int_date))
prova <- PanelCrossValidationMulti(data = newdata, int_date = int_date)
prova <- PanelCrossValidationMulti(data = newdata, int_date = int_date)
prova <- PanelCrossValidationMulti(data = newdata, int_date = int_date)
prova <- PanelCrossValidationMulti(data = newdata, int_date = int_date)
class(prova)
length(prova)
prova[[1]]$best
prova[[2]]$best
any(!(int_date %in% newdata[, "Time"]))
!(int_date %in% newdata[, "Time"])
!(unique(int_date) %in% newdata[, "Time"])
any(!(unique(int_date) %in% data[, "Time"]))
any(!(unique(int_date) %in% newdata[, "Time"]))
sapply(unique(int_date), FUN = function(x)(sum(unique(newdata[, "Time"]) < x) - pcv_block < 1))
sapply(unique(int_date), FUN = function(x)(sum(unique(newdata[, "Time"]) < x) - 1 < 1))
prova <- PanelCrossValidationMulti(data = newdata, int_date = int_date)
class(prova$2019)
prova <- PanelCrossValidationMulti(data = newdata, int_date = int_date)
prova$int_2019$best
prova <- PanelCrossValidationMulti(data = newdata, int_date = c(int_date,2017))
prova <- PanelCrossValidationMulti(data = newdata, int_date = rep(c(rep(2015, times = 20), rep(2019, times = 80)), each = 5))
unique(newdata$Time)
prova <- PanelCrossValidationMulti(data = newdata, int_date = rep(c(rep(2017, times = 20), rep(2019, times = 80)), each = 5))
prova <- PanelCrossValidationMulti(data = newdata, int_date = int_date)
View(data[data$Time == unique(int_date)[1],])
nrow(data[data$Time == unique(int_date)[1],])
nrow(data[data$Time == unique(int_date)[2],])
nrow(data[int_date == unique(int_date)[1],])
nrow(data[int_date == unique(int_date)[2],])
prova <- PanelCrossValidationMulti(data = newdata, int_date = int_date)
warnings()
prova$int_2019$best
prova$int_2020$best
int_date_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_date <- rep(int_date_i, each = unique(newdata$Time))
int_date_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_date <- rep(int_date_i, each = unique(newdata$Time))
int_date_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_date <- rep(int_date_i, each = unique(data$year))
head(data.frame(int_date), data)
unique(data$year)
int_date_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_date <- rep(int_date_i, each = unique(data$year))
head(data.frame(int_date, data))
int_date_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_date <- rep(int_date_i, each = length(unique(data$year)))
View(data.frame(int_date, data))
newdata <- as.PanelMLCM(y = data[, "Y"], timevar = data[, "year"], id = data[, "ID"],
x = data[, !(names(data) %in% c("Y", "ID", "year"))], y.lag = 1)
View(newdata)
pcv <- PanelCrossValidationMulti(data = newdata, int_date = int_date)
str(data)
data2 <- data.frame(int_date, data)
str(data2)
newdata <- as.PanelMLCM(y = data2[, "Y"], timevar = data2[, "year"], id = data2[, "ID"],
x = data2[, !(names(data2) %in% c("Y", "ID", "year"))], y.lag = 1)
View(newdata)
View(data.frame(NULL, data))
prova <- NULL
View(data.frame(NULL, data))
# Assume the following intervention dates
int_year_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_year <- rep(int_year_i, each = length(unique(data$year)))
# Assume the following intervention dates
int_year_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_year <- rep(int_year_i, each = length(unique(data$year)))
data2 <- data.frame(int_year, data)
fit <- MLCM(data = data2, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "classic", nboot = 10, y.lag = 2)
fit <- MLCM(data = data2, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "classic", nboot = 10, y.lag = 2)
fit <- MLCM(data = data2, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "classic", nboot = 10, y.lag = 2)
fit <- MLCM(data = data2, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "classic", nboot = 10, y.lag = 2)
unique(int_date)
unique(data[,int_date])
fit <- MLCM(data = data2, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "classic", nboot = 10, y.lag = 2)
fit <- MLCM(data = data2, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "classic", nboot = 10, y.lag = 2)
fit <- MLCM(data = data2, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "classic", nboot = 10, y.lag = 2)
best2 <- lapply(best, FUN = function(x)(x[["best"]]))
best2[[1]]
fit <- MLCM(data = data2, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "classic", nboot = 10, y.lag = 2)
best$int_2019
int_year_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_year <- rep(int_year_i, each = length(unique(data$year)))
# Define data2
data2 <- data.frame(int_year, data)
# Organizing the dataset with as.PanelMLCM
newdata <- as.PanelMLCM(y = data2[, "Y"], timevar = data2[, "year"], id = data[, "ID"],
int_date = data2[, "int_year"],
x = data2[, !(names(data) %in% c("Y", "ID", "year", "int_year"))], y.lag = 1)
pcv <- PanelCrossValidationMulti(data = newdata)
fit <- MLCM(data = data2, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, y.lag = 2)
Q
inherits(data2, "data.frame")
inherits(data2, "matrix")
class(data2)
class(data)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, y.lag = 2)
class(fit)
class(newdata)
inherits(newdata, "PanelMLCM")
is.PanelMLCM(newdata)
inherits(newdata, c("data.frame", "PanelMLCM"))
inherits(newdata, c("matrix", "PanelMLCM"))
inherits(newdata, c("character", "PanelMLCM"))
inherits(newdata, c("character", "PanelMLCM"), which = T)
isa(newdata, "data.frame")
isa(newdata, what = "data.frame")
class(newdata)
isa(newdata, what = "PanelMLCM")
isa(newdata, what = c("data.frame", "PanelMLCM"))
fit <- MLCM(data = data2, y = "Y", timevar = "year", id = "ID", int_date = int_year,
inf_type = "classic", nboot = 10, y.lag = 2)
is.null(y)
class(y) == "character"
lapply(list(y, timevar, id), FUN = function(x)(!(is.null(x) | class(x) == "character")))
mapply(list(y, timevar, id), FUN = function(x)(!(is.null(x) | class(x) == "character")))
mapply(list(y, timevar, id), FUN = function(par)(!(is.null(par) | par %in% colnames(data))))
ck <- mapply(list(y, timevar, id), FUN = function(par)(!(is.null(par) | class(par) == "character")))
ck
fit <- MLCM(data = data2, y = "Y", id = "ID", int_date = int_year,
inf_type = "classic", nboot = 10, y.lag = 2)
fit <- MLCM(data = data2, y = 3, id = "ID", int_date = int_year,
inf_type = "classic", nboot = 10, y.lag = 2)
fit <- MLCM(data = data2, y = "Y", timevar = 3, id = "ID", int_date = int_year,
inf_type = "classic", nboot = 10, y.lag = 2)
ck
which(ck)
90*1.1
110-11
51.623,77-3600
51623.77-3600
c("y", "id", "timevar")[which(ck)]
c("y", "timevar", "id")[which(ck)]
fit <- MLCM(data = data2, y = "Y", timevar = 3, id = 4, int_date = int_year,
inf_type = "classic", nboot = 10, y.lag = 2)
fit <- MLCM(data = data2, y = "Y", timevar = 3, id = 4, int_date = int_year,
inf_type = "classic", nboot = 10, y.lag = 2)
fit <- MLCM(data = data2, y = "Y", timevar = "year", id = "prova", int_date = int_year,
inf_type = "classic", nboot = 10, y.lag = 2)
fit <- MLCM(data = data2, y = "Y", timevar = "year", id = "prova", int_date = int_year,
inf_type = "classic", nboot = 10, y.lag = 2)
ck
c("y", "timevar", "id")[which(ck)]
c(y, timevar, id)[which(ck)]
fit <- MLCM(data = data2, y = "Y", timevar = "year", id = "prova", int_date = int_year,
inf_type = "classic", nboot = 10, y.lag = 2)
int_year2 <- int_year
int_year2[1] <- 2001
unique(int_year2)
fit <- MLCM(data = data2, y = "Y", timevar = "year", id = "prova", int_date = int_year2,
inf_type = "classic", nboot = 10, y.lag = 2)
fit <- MLCM(data = data2, y = "Y", timevar = "year", id = "ID", int_date = int_year2,
inf_type = "classic", nboot = 10, y.lag = 2)
head(data2)
data3 <- data2
head(data3, 10)
data3[1:8,"int_year"]
data3[1:8,"int_year"] <- 2001
unique(data3$int_year)
fit <- MLCM(data = data3, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "classic", nboot = 10, y.lag = 2)
fit <- MLCM(data = data3, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "classic", nboot = 10, y.lag = 2)
is.null(timevar)
any(!(unique(data[,int_date]) %in% data[, "Time"]))
fit <- MLCM(data = data3, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "classic", nboot = 10, y.lag = 2)
time_col
time_col
fit <- MLCM(data = data2, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "classic", nboot = 10, y.lag = 2)
fit <- MLCM(data = data3, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "classic", nboot = 10, y.lag = 2)
fit <- MLCM(data = data2, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "classic", nboot = 10, y.lag = 2)
120+257
377+54
377 - 64
313+64
69+321
377+54
257+120
377-69+5
313+49
362+69
gc()
gc()
rm(list = ls())
gc()
# Assume the following intervention dates
int_year_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_year <- rep(int_year_i, each = length(unique(data$year)))
# Assume the following intervention dates
int_year_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_year <- rep(int_year_i, each = length(unique(data$year)))
# Define data2
data2 <- data.frame(int_year, data)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, y.lag = 2)
fit <- MLCM(data = data2, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "classic", nboot = 10, y.lag = 2)
length(pre[[1]])
print(pre[[1]])
which(data[data$int_date == 2019, "Time"] < x))
which(data[data$int_date == 2019, "Time"] < x)
which(data[data$int_date == 2019, "Time"] < 2019)
View(data[data$int_date == 2019, ])
View(data[data$int_date == 2019, ][pre,])
View(data[data$int_date == 2019, ][pre[[1]],])
View(data[data$int_date == 2019, ][pre[[2]],])
View(data[data$int_date == 2020, ][pre[[2]],])
View(ii[[1]])
View(data[data$int_date == 2019, ][pre[[1]],])
length(bestt)
fit <- MLCM(data = data2, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "classic", nboot = 10, y.lag = 2)
eff_boot <- mapply(i = ii, p = post, b = bestt, function(i, p, b){ate_est_multi(data = data[c(i, p),], best = b, metric = metric, ran.err = TRUE, y.lag = y.lag)})
eff_boot <- mapply(i = ii, p = post, b = bestt, FUN = function(i, p, b){ate_est_multi(data = data[c(i, p),], best = b, metric = metric, ran.err = TRUE, y.lag = y.lag)})
eff_boot <- mapply(i = ii, p = post, function(i, p){ate_est_multi(data = data[c(i, p),], best = bestt, metric = metric, ran.err = TRUE, y.lag = y.lag)})
eff_boot <- mapply(i = ii, p = post, function(i, p){ate_est_multi(data = data[c(i, p),], best = bestt, metric = metric, ran.err = TRUE, y.lag = y.lag)}, SIMPLIFY = FALSE)
fit <- MLCM(data = data2, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "classic", nboot = 10, y.lag = 2)
View(ate_i)
View(data)
length(unique(data$ID))
View(data)
fit <- MLCM(data = data2, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "classic", nboot = 10, y.lag = 2)
fit <- MLCM(data = data2, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "classic", nboot = 10, y.lag = 2)
fit <- MLCM(data = data2, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "classic", nboot = 10, y.lag = 2)
View(ta_ind_effects)
prova <- mapply(x = nint, y = best, FUN = function(x,y){datax <- data_panel[data_panel$int_date == x,]
datax$int_date <- NULL
boot_ate(data = datax, int_date = x, bestt = y, type = inf_type, nboot = nboot,
ate = global_ate, ind.eff = ta_ind_effects[, -ind], alpha = alpha, metric = metric, y.lag = y.lag)}, SIMPLIFY = FALSE)
View(prova[[1]]$ate_boot)
boot_inf <- mapply(x = nint, y = best, FUN = function(x,y){datax <- data_panel[data_panel$int_date == x,]
datax$int_date <- NULL
boot_ate(data = datax, int_date = x, bestt = y, type = inf_type, nboot = nboot,
ate = global_ate, ind.eff = ta_ind_effects[, -ind], alpha = alpha, metric = metric, y.lag = y.lag)}, SIMPLIFY = FALSE)
global_ate_boot <- sapply(boot_inf, FUN = function(x)(colMeans(x$ate_boot)))
View(global_ate_boot)
0.5*(80.23+60.20)
0.5*(80.24+60.21)
0.5*(79.32+60.28)
colMeans(boot_inf[[1]]$ate_boot)
boot_inf[[1]]$ate_boot
boot_inf[[2]]$ate_boot
global_ate_boot <- rowMeans(sapply(boot_inf, FUN = function(x)(colMeans(x$ate_boot))))
global_ate_boot
alpha/2
1-alpha/2
quantile(global_ate_boot, probs = c(alpha/2, 1- alpha/2))
boot_inf[[2]]$conf.ate
class(boot_inf[[1]]$ind_boot)
dim(boot_inf[[1]]$ind_boot)
dim(boot_inf[[2]]$ind_boot)
View(boot_inf[[1]]$ind_boot)
length(data_panel$int_date == 2019))
length(data_panel$int_date == 2019)
sum(data_panel$int_date == 2019)
View(boot_inf[[1]]$ind_boot)
fit <- MLCM(data = data2, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "classic", nboot = 10, y.lag = 2)
View(ta_ind_effects)
View(ind_boot)
View(eff_boot[[1]]$ind_effects)
View(ind_boot)
View(data)
View(ind_boot)
prova <- matrix(c(1,2,3,4,5,6,7,8,9,10,11,12), nrow = 3, ncol = 4, byrow = T)
prova
array(prova, dim = c(2,4,2))
asplit(prova, 1)
c(prova)
array(c(prova), dim = c(2,4,2))
array(c(prova), dim = c(4,2,2))
unlist(asplit(prova, 1))
array(c(prova), dim = c(4,2,2), byrow = T)
array(c(prova), dim = c(4,2,2), by.row = T)
c(prova)
prova
r(prova)
t(c(prova))
unlist(asplit(prova, 1))
array(unlist(asplit(prova, 1)), dim = c(2,4,2)
)
array(unlist(asplit(prova, 1)), dim = c(4,2,2))
fit <- MLCM(data = data2, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "classic", nboot = 10, y.lag = 2)
boot_inf[[1]]$ind_boot
View(boot_inf[[1]]$ind_boot)
class(boot_inf[[1]]$ind_boot)
View(ta_ind_effects)
boot_inf[[1]]$ate_boot
NROW(boot_inf[[1]]$ate_boot
)
c(nboot, nrow(boot_inf[[1]]$ind_boot)/2 ,2)
NROW(boot_inf[[2]]$ate_boot
)
nrow(boot_inf[[2]]$ind_boot)
tempavg_ind <- lapply(boot_inf, FUN = function(x){n <- NROW(x$ate_boot)
asvec <- unlist(asplit(x$ind_boot, 1))
array(asvec, dim = c(nboot, nrow(x$ind_boot)/n ,n))})
View(tempavg_ind[[1]])
View(tempavg_ind[[1]][,,1])
View(tempavg_ind[[1]][,,2])
prova <- apply(tempavg_ind[[2]], 3, mean)
prova <- apply(tempavg_ind[[2]], c(1,2), mean)
View(prova)
View(tempavg_ind[[2]][,,1])
prova <- apply(tempavg_ind[[1]], c(1,2), mean)
View(prova)
View(0.5*(tempavg_ind[[1]][,,1] + tempavg_ind[[1]][,,2]))
identical(prova, 0.5*(tempavg_ind[[1]][,,1] + tempavg_ind[[1]][,,2]))
tempavg_ind <- lapply(boot_inf, FUN = function(x){n <- NROW(x$ate_boot)
asvec <- unlist(asplit(x$ind_boot, 1))
asarr <- array(asvec, dim = c(nboot, nrow(x$ind_boot)/n ,n))}
apply(asarr, c(1,2), mean))
tempavg_ind <- lapply(boot_inf, FUN = function(x){n <- NROW(x$ate_boot)
asvec <- unlist(asplit(x$ind_boot, 1))
asarr <- array(asvec, dim = c(nboot, nrow(x$ind_boot)/n ,n))
apply(asarr, c(1,2), mean)})
View(tempavg_ind)
View(tempavg_ind[[1]])
length(global_ate_boot)
conf.tempavg.ind <- lapply(tempavg_ind, FUN = function(x)(quantile(x, probs = c(alpha/2, 1- alpha/2))))
View(conf.tempavg.ind[[1]])
conf.tempavg.ind <- lapply(tempavg_ind, FUN = function(x)(apply(x, 2, quantile, probs = c(alpha/2, 1- alpha/2))))
View(conf.tempavg.ind[[1]])
View(conf.tempavg.ind[[2]])
prova <- do.call("rbind", conf.tempavg.ind)
prova <- do.call("cbind", conf.tempavg.ind)
View(prova)
View(conf.tempavg.ind[[1]])
prova <- t(do.call("cbind", conf.tempavg.ind))
View(prova)
View(boot_inf[[1]]$conf.individual)
dim(boot_inf[[1]]$conf.individual)
dim(boot_inf[[1]]$conf.individual[,,1])
View(boot_inf[[1]]$conf.individual[,,1])
which(data_panel$int_date == nint[1], "ID")
unique(data_panel[data_panel$int_date == nint[1], "ID"])
sapply(nint, FUN = function(x)(unique(data_panel[data_panel$int_date == x, "ID"])))
sapply(nint, FUN = function(x)(unique(data_panel[data_panel$int_date == x, "ID"])), simplify = T)
unlist(sapply(nint, FUN = function(x)(unique(data_panel[data_panel$int_date == x, "ID"]))))
rep(c(2,3), each = c(1,2))
mapply(x=c(2,3), y=c(3,4), FUN = function(x,y)(rep(x, each = y)) )
length(nint)
prova <- t(do.call("cbind", conf.tempavg.ind))
View(data.frame(ID = unlist(sapply(nint, FUN = function(x)(unique(data_panel[data_panel$int_date == x, "ID"])))),
int_date = unlist(sapply(x = nint, FUN = function(x)(rep(x, each = sum(data_panel$int_date == x))))),
prova))
data.frame(ID = unlist(sapply(nint, FUN = function(x)(unique(data_panel[data_panel$int_date == x, "ID"])))),
int_date = unlist(sapply(x = nint, FUN = function(x)(rep(x, each = sum(data_panel$int_date == x))))),
prova)
sapply(x = nint, FUN = function(x)(rep(x, each = sum(data_panel$int_date == x))))
sapply(nint, FUN = function(x)(rep(x, each = sum(data_panel$int_date == x))))
View(data.frame(ID = unlist(sapply(nint, FUN = function(x)(unique(data_panel[data_panel$int_date == x, "ID"])))),
int_date = unlist(sapply(nint, FUN = function(x)(rep(x, each = sum(data_panel$int_date == x))))),
prova))
length(unlist(sapply(nint, FUN = function(x)(rep(x, each = sum(data_panel$int_date == x))))))
nint
sum(data_panel$int_date == 2019)
unique(data_panel[data_panel$int_date == 2019, c("ID", "int_date")])
conf.tempavg.ind <- lapply(tempavg_ind, FUN = function(x)(apply(x, 2, quantile, probs = c(alpha/2, 1- alpha/2))))
conf.tempavg.ind <- t(do.call("cbind", conf.tempavg.ind))
View(data.frame(unlist(sapply(nint, FUN = function(x)(unique(data_panel[data_panel$int_date == x, c("ID", "int_date")])))),
conf.tempavg.ind))
sapply(nint, FUN = function(x)(unique(data_panel[data_panel$int_date == x, c("ID", "int_date")])))
sapply(nint, FUN = function(x)(unique(data_panel[data_panel$int_date == x, c("ID", "int_date")])), simplify = F)
View(data.frame(do.call("cbind", sapply(nint, FUN = function(x)(unique(data_panel[data_panel$int_date == x, c("ID", "int_date")])), simplify = FALSE)),
conf.tempavg.ind))
View(data.frame(do.call("rbind", sapply(nint, FUN = function(x)(unique(data_panel[data_panel$int_date == x, c("ID", "int_date")])), simplify = FALSE)),
conf.tempavg.ind))
global_ate
