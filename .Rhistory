source("~/GitHub/MLCM/data-raw/DATASET.R", echo=TRUE)
old <- Sys.time()
### Example 2. Changing ML methods and estimating ATE
enet <- list(method = "enet",
tuneGrid = expand.grid(
fraction = seq(0.1, 0.9, by = 0.1),
lambda = seq(0.1, 0.9, by = 0.1)))
linreg <- list(method = "lm",
tuneGrid = expand.grid(
intercept = seq(0, 10, by = 0.5)))
pls <- list(method = "pls",
tuneGrid = expand.grid(ncomp = c(1:5)))
pcv <- PanelCrossValidation(data = newdata, int_date = 2019, trControl = ctrl,
ML_methods = list(enet, linreg, pls))
warnings()
View(newdata)
View(data)
old <- Sys.time()
### Example 2. Changing ML methods and estimating ATE
enet <- list(method = "enet",
tuneGrid = expand.grid(
fraction = seq(0.1, 0.9, by = 0.1),
lambda = seq(0.1, 0.9, by = 0.1)))
linreg <- list(method = "lm",
tuneGrid = expand.grid(
intercept = seq(0, 10, by = 0.5)))
pls <- list(method = "pls",
tuneGrid = expand.grid(ncomp = c(1:5)))
pcv <- PanelCrossValidation(data = newdata, int_date = 2019, trControl = ctrl,
ML_methods = list(enet, linreg, pls))
old<- Sys.time()
# Organizing the dataset
newdata <- as.PanelMLCM(y = data[, "Y"], timevar = data[, "year"], id = data[, "ID"],
x = data[, !(names(data) %in% c("Y", "ID", "year"))], y.lag = 1)
# Using the first two years for training and the last two years for testing
indices <- CAST::CreateSpacetimeFolds(newdata, timevar = "Time", k = length(unique(newdata$Time)))
trainx <- indices$indexOut[1:2]
testx <- indices$indexOut[3:4]
ctrl <- trainControl(index = trainx, indexOut = testx)
# Customized panel cross validation
pcv <- PanelCrossValidation(data = newdata, int_date = 2019, trControl = ctrl)
new <- Sys.time()
new - old
old <- Sys.time()
### Example 2. Changing ML methods and estimating ATE
enet <- list(method = "enet",
tuneGrid = expand.grid(
fraction = seq(0.1, 0.9, by = 0.1),
lambda = seq(0.1, 0.9, by = 0.1)))
linreg <- list(method = "lm",
tuneGrid = expand.grid(
intercept = seq(0, 10, by = 0.5)))
pls <- list(method = "pls",
tuneGrid = expand.grid(ncomp = c(1:5)))
pcv <- PanelCrossValidation(data = newdata, int_date = 2019, trControl = ctrl,
ML_methods = list(enet, linreg, pls))
causal <- MLCM(data = newdata, int_date = 2019, inf_type = "classic", PCV = pcv,
nboot = 10, CATE = FALSE)
causal$ate$estimate
causal$ate$conf.interval
new <- Sys.time()
new - old
old <- Sys.time()
### Example 2. Changing ML methods and estimating ATE
enet <- list(method = "enet",
tuneGrid = expand.grid(
fraction = seq(0.1, 0.9, by = 0.1),
lambda = seq(0.1, 0.9, by = 0.1)))
linreg <- list(method = "lm",
tuneGrid = expand.grid(
intercept = seq(0, 10, by = 0.5)))
pls <- list(method = "pls",
tuneGrid = expand.grid(ncomp = c(1:8)))
pcv <- PanelCrossValidation(data = newdata, int_date = 2019, trControl = ctrl,
ML_methods = list(enet, linreg, pls))
causal <- MLCM(data = newdata, int_date = 2019, inf_type = "block", PCV = pcv,
nboot = 10, CATE = FALSE)
causal$ate$estimate
causal$ate$conf.interval
new <- Sys.time()
new - old
old <- Sys.time()
### Example 2. Changing ML methods and estimating ATE
enet <- list(method = "enet",
tuneGrid = expand.grid(
fraction = seq(0.1, 0.9, by = 0.1),
lambda = seq(0.1, 0.9, by = 0.1)))
linreg <- list(method = "lm",
tuneGrid = expand.grid(
intercept = seq(0, 10, by = 0.5)))
pls <- list(method = "pls",
tuneGrid = expand.grid(ncomp = c(1:8)))
pcv <- PanelCrossValidation(data = newdata, int_date = 2019, trControl = ctrl,
ML_methods = list(enet, linreg, pls))
causal <- MLCM(data = newdata, int_date = 2019, inf_type = "block", PCV = pcv,
nboot = 10, CATE = FALSE, y.lag = 2)
causal$ate$estimate
causal$ate$conf.interval
new <- Sys.time()
new - old
old <- Sys.time()
### Example 2. Changing ML methods and estimating ATE
enet <- list(method = "enet",
tuneGrid = expand.grid(
fraction = seq(0.1, 0.9, by = 0.1),
lambda = seq(0.1, 0.9, by = 0.1)))
linreg <- list(method = "lm",
tuneGrid = expand.grid(
intercept = seq(0, 10, by = 0.5)))
pls <- list(method = "pls",
tuneGrid = expand.grid(ncomp = c(1:8)))
pcv <- PanelCrossValidation(data = newdata, int_date = 2019, trControl = ctrl,
ML_methods = list(enet, linreg, pls))
causal <- MLCM(data = newdata, int_date = 2019, inf_type = "block", PCV = pcv,
nboot = 10, CATE = FALSE, y.lag = 2, pcv_block = 2)
causal$ate$estimate
causal$ate$conf.interval
new <- Sys.time()
new - old
load_all()
source("~/GitHub/MLCM/data-raw/DATASET.R", echo=TRUE)
load_all()
load_all()
library(MachineControl)
library(MachineControl)
View(data)
dim(data)
dim(data)
source("~/GitHub/MLCM/data-raw/DATASET.R", echo=TRUE)
source("~/GitHub/MLCM/data-raw/DATASET.R", echo=TRUE)
library(usethis)
source("~/GitHub/MLCM/data-raw/DATASET.R", echo=TRUE)
library(devtools)
source("~/GitHub/MLCM/data-raw/DATASET.R", echo=TRUE)
## Code to prepare `DATA` dataset
source("./R/simulate")
## Code to prepare `DATA` dataset
source("./R/simulate.R")
rm(list=ls())
library(devtools)
library(usethis)
source("~/GitHub/MLCM/data-raw/DATASET.R", echo=TRUE)
load_all()
library(devtools)
load_all()
View(data)
dim(data)
load_all()
library(devtools)
load_all()
source("~/GitHub/MLCM/tests/refexamples.R", echo=TRUE)
source("~/GitHub/MLCM/tests/refexamples.R", echo=TRUE)
causal$ate
causal_stag$global_ate$estimate
save(pcv, pcv_stag, causal, causal_stag, file = "./tests/testthat/refexamples.RData")
source("~/GitHub/MLCM/tests/refexamples.R", echo=TRUE)
use_test("panelcv")
rm(list=ls())
load_all()
load("./refexamples.RData")
load("./tests/testthat/refexamples.RData")
test_that("PanelCrossValidation works", {
set.seed(1)
newdata <- as.PanelMLCM(y = data[, "Y"], timevar = data[, "year"], id = data[, "ID"],
x = data[, !(names(data) %in% c("Y", "ID", "year"))], y.lag = 1)
enet <- list(method = "enet",
tuneGrid = expand.grid(
fraction = seq(0.1, 0.9, by = 0.1),
lambda = seq(0.1, 0.9, by = 0.1)))
linreg <- list(method = "lm",
tuneGrid = expand.grid(
intercept = seq(0, 10, by = 0.5)))
pls <- list(method = "pls", tuneGrid = expand.grid(ncomp = c(1:5)))
expect_equal(PanelCrossValidation(data = newdata, int_date = 2019,
ML_methods = list(enet, linreg, pls)),
pcv)
})
test_that("PanelCrossValidation works", {
newdata <- as.PanelMLCM(y = data[, "Y"], timevar = data[, "year"], id = data[, "ID"],
x = data[, !(names(data) %in% c("Y", "ID", "year"))], y.lag = 1)
enet <- list(method = "enet",
tuneGrid = expand.grid(
fraction = seq(0.1, 0.9, by = 0.1),
lambda = seq(0.1, 0.9, by = 0.1)))
set.seed(1)
linreg <- list(method = "lm",
tuneGrid = expand.grid(
intercept = seq(0, 10, by = 0.5)))
set.seed(1)
pls <- list(method = "pls", tuneGrid = expand.grid(ncomp = c(1:5)))
set.seed(1)
pcv.1 <- PanelCrossValidation(data = newdata, int_date = 2019,
ML_methods = list(enet, linreg, pls))
expect_equal( pcv.1, pcv)
})
source("~/GitHub/MLCM/tests/refexamples.R", echo=TRUE)
load("./tests/testthat/refexamples.RData")
test_that("PanelCrossValidation works", {
newdata <- as.PanelMLCM(y = data[, "Y"], timevar = data[, "year"], id = data[, "ID"],
x = data[, !(names(data) %in% c("Y", "ID", "year"))], y.lag = 1)
enet <- list(method = "enet",
tuneGrid = expand.grid(
fraction = seq(0.1, 0.9, by = 0.1),
lambda = seq(0.1, 0.9, by = 0.1)))
set.seed(1)
linreg <- list(method = "lm",
tuneGrid = expand.grid(
intercept = seq(0, 10, by = 0.5)))
set.seed(1)
pls <- list(method = "pls", tuneGrid = expand.grid(ncomp = c(1:5)))
set.seed(1)
pcv.1 <- PanelCrossValidation(data = newdata, int_date = 2019,
ML_methods = list(enet, linreg, pls))
expect_equal( pcv.1, pcv)
})
pcv$best$results
rm(list=ls())
load_all()
load("./tests/testthat/refexamples.RData")
pcv$best$results
newdata <- as.PanelMLCM(y = data[, "Y"], timevar = data[, "year"], id = data[, "ID"],
x = data[, !(names(data) %in% c("Y", "ID", "year"))], y.lag = 1)
enet <- list(method = "enet",
tuneGrid = expand.grid(
fraction = seq(0.1, 0.9, by = 0.1),
lambda = seq(0.1, 0.9, by = 0.1)))
set.seed(1)
linreg <- list(method = "lm",
tuneGrid = expand.grid(
intercept = seq(0, 10, by = 0.5)))
set.seed(1)
pls <- list(method = "pls", tuneGrid = expand.grid(ncomp = c(1:5)))
set.seed(1)
pcv.1 <- PanelCrossValidation(data = newdata, int_date = 2019,
ML_methods = list(enet, linreg, pls))
pcv.1$best$results
pcv$best$results
identical(pcv.1$best$results, pcv$best$results)
identical(pcv.1, pcv)
test_that("PanelCrossValidation works", {
newdata <- as.PanelMLCM(y = data[, "Y"], timevar = data[, "year"], id = data[, "ID"],
x = data[, !(names(data) %in% c("Y", "ID", "year"))], y.lag = 1)
enet <- list(method = "enet",
tuneGrid = expand.grid(
fraction = seq(0.1, 0.9, by = 0.1),
lambda = seq(0.1, 0.9, by = 0.1)))
set.seed(1)
linreg <- list(method = "lm",
tuneGrid = expand.grid(
intercept = seq(0, 10, by = 0.5)))
set.seed(1)
pls <- list(method = "pls", tuneGrid = expand.grid(ncomp = c(1:5)))
set.seed(1)
pcv.1 <- PanelCrossValidation(data = newdata, int_date = 2019,
ML_methods = list(enet, linreg, pls))
expect_equal( pcv.1, pcv)
})
pcv$best$bestTune
pcv.1$best$bestTune
identical(pcv.1$best$trainingData, pcv$best$trainingData)
expect_equal(pcv.1$best, pcv$best)
pcv.1$best.metric
pcv$best.metric
pcv$best$resample
expect_equal(pcv.1$best$resample, pcv$best$resample)
newdata <- as.PanelMLCM(y = data[, "Y"], timevar = data[, "year"], id = data[, "ID"],
x = data[, !(names(data) %in% c("Y", "ID", "year"))], y.lag = 1)
set.seed(1)
enet <- list(method = "enet",
tuneGrid = expand.grid(
fraction = seq(0.1, 0.9, by = 0.1),
lambda = seq(0.1, 0.9, by = 0.1)))
set.seed(1)
linreg <- list(method = "lm",
tuneGrid = expand.grid(
intercept = seq(0, 10, by = 0.5)))
set.seed(1)
pls <- list(method = "pls", tuneGrid = expand.grid(ncomp = c(1:5)))
set.seed(1)
pcv.1 <- PanelCrossValidation(data = newdata, int_date = 2019,
ML_methods = list(enet, linreg, pls))
expect_equal(pcv.1$best.metric, pcv$best.metric)
expect_equal(pcv.1$best$results, pcv$best$results)
expect_equal(pcv.1$best$bestTune, pcv$best$bestTune)
expect_equal(pcv.1$best$trainingData, pcv$best$trainingData)
expect_equal(pcv.1$best$resample, pcv$best$resample)
expect_equal(pcv.1$best, pcv$best)
rm(list=ls())
load_all()
source("~/GitHub/MLCM/tests/refexamples.R", echo=TRUE)
newdata <- as.PanelMLCM(y = data[, "Y"], timevar = data[, "year"], id = data[, "ID"],
x = data[, !(names(data) %in% c("Y", "ID", "year"))], y.lag = 1)
set.seed(1)
pcv_stag.1 <- PanelCrossValidationStag(data = newdata, ML_methods = list(enet, linreg, pls))
int_year_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_year <- rep(int_year_i, each = length(unique(data$year)))
data_stag <- data.frame(int_year, data)
newdata <- as.PanelMLCM(y = data[, "Y"], timevar = data[, "year"], id = data[, "ID"],
x = data[, !(names(data) %in% c("Y", "ID", "year"))], y.lag = 1)
set.seed(1)
pcv_stag.1 <- PanelCrossValidationStag(data = newdata, ML_methods = list(enet, linreg, pls))
newdata <- as.PanelMLCM(y = data_stag[, "Y"], timevar = data_stag[, "year"], id = data_stag[, "ID"],
int_date = data_stag[, "int_year"],
x = data_stag[, !(names(data_stag) %in% c("Y", "ID", "year", "int_year"))], y.lag = 2)
set.seed(1)
pcv_stag.1 <- PanelCrossValidationStag(data = newdata, ML_methods = list(enet, linreg, pls))
lapply(1:length(pcv_stag.1), FUN = function(i)(expect_equal(pcv_stag.1[[i]]$best.metric, pcv_stag[[i]]$best.metric)))
pcv_stag.1[[1]]$best.metric
pcv_stag[[1]]$best.metric
pcv_stag[[2]]$best.metric
pcv_stag.1[[2]]$best.metric
lapply(pcv_stag, FUN = function(x)(x$best.metric))
expect_equal(lapply(pcv_stag, FUN = function(x)(x$best.metric)), lapply(pcv_stag.1, FUN = function(x)(x$best.metric)))
expect_equal(lapply(pcv_stag.1, FUN = function(x)(x$best.metric)), lapply(pcv_stag, FUN = function(x)(x$best.metric)))
expect_equal(lapply(pcv_stag.1, FUN = function(x)(x$best$results)), lapply(pcv_stag, FUN = function(x)(x$best$results)))
expect_equal(lapply(pcv_stag.1, FUN = function(x)(x$best$bestTune)), lapply(pcv_stag, FUN = function(x)(x$best$bestTune)))
expect_equal(lapply(pcv_stag.1, FUN = function(x)(x$best$trainingData)), lapply(pcv_stag, FUN = function(x)(x$best$trainingData)))
expect_equal(lapply(pcv_stag.1, FUN = function(x)(x$best$resample)), lapply(pcv_stag, FUN = function(x)(x$best$resample)))
expect_equal(lapply(pcv_stag.1, FUN = function(x)(x$best)), lapply(pcv_stag, FUN = function(x)(x$best)))
any(sapply(c("openblas", "mkl"), grepl, tolower(extSoftVersion()["BLAS"])))
sapply(c("openblas", "mkl"), grepl, tolower(extSoftVersion()["BLAS"]))
rm(list=ls())
load_all()
source("~/GitHub/MLCM/tests/refmod.R", echo=TRUE)
newdata <- as.PanelMLCM(y = data[, "Y"], timevar = data[, "year"], id = data[, "ID"],
x = data[, !(names(data) %in% c("Y", "ID", "year"))], y.lag = 1)
set.seed(1)
enet <- list(method = "enet",
tuneGrid = expand.grid(
fraction = seq(0.1, 0.9, by = 0.1),
lambda = seq(0.1, 0.9, by = 0.1)))
set.seed(1)
linreg <- list(method = "lm",
tuneGrid = expand.grid(
intercept = seq(0, 10, by = 0.5)))
set.seed(1)
pls <- list(method = "pls", tuneGrid = expand.grid(ncomp = c(1:5)))
set.seed(1)
pcv.1 <- PanelCrossValidation(data = newdata, int_date = 2019,
ML_methods = list(enet, linreg, pls))
causal.1 <- MLCM(data = newdata, int_date = 2019, inf_type = "classic", PCV = pcv.1,
nboot = 10, CATE = FALSE, y.lag = 2)
rm(list=ls())
load_all()
source("~/GitHub/MLCM/tests/refmod.R", echo=TRUE)
rm(list=ls())
load_all()
load("./refmod.RData")
int_year_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_year <- rep(int_year_i, each = length(unique(data$year)))
data_stag <- data.frame(int_year, data)
newdata <- as.PanelMLCM(y = data_stag[, "Y"], timevar = data_stag[, "year"], id = data_stag[, "ID"],
int_date = data_stag[, "int_year"],
x = data_stag[, !(names(data_stag) %in% c("Y", "ID", "year", "int_year"))], y.lag = 2)
set.seed(1)
enet <- list(method = "enet",
tuneGrid = expand.grid(
fraction = seq(0.1, 0.9, by = 0.1),
lambda = seq(0.1, 0.9, by = 0.1)))
set.seed(1)
linreg <- list(method = "lm",
tuneGrid = expand.grid(
intercept = seq(0, 10, by = 0.5)))
set.seed(1)
pls <- list(method = "pls", tuneGrid = expand.grid(ncomp = c(1:5)))
set.seed(1)
pcv_stag <- PanelCrossValidationStag(data = newdata, ML_methods = list(enet, linreg, pls))
set.seed(1)
causal_stag <- MLCMStag(data = newdata, int_date = "int_date", inf_type = "block", nboot = 10, PCV = pcv_stag, y.lag = 2)
causal_stag$global_ate$estimate
causal_stag$group_ate$int_2019$estimate
rm(list=ls())
load_all()
int_year_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_year <- rep(int_year_i, each = length(unique(data$year)))
data_stag <- data.frame(int_year, data)
newdata <- as.PanelMLCM(y = data_stag[, "Y"], timevar = data_stag[, "year"], id = data_stag[, "ID"],
int_date = data_stag[, "int_year"],
x = data_stag[, !(names(data_stag) %in% c("Y", "ID", "year", "int_year"))], y.lag = 2)
set.seed(1)
enet <- list(method = "enet",
tuneGrid = expand.grid(
fraction = seq(0.1, 0.9, by = 0.1),
lambda = seq(0.1, 0.9, by = 0.1)))
set.seed(1)
linreg <- list(method = "lm",
tuneGrid = expand.grid(
intercept = seq(0, 10, by = 0.5)))
set.seed(1)
pls <- list(method = "pls", tuneGrid = expand.grid(ncomp = c(1:5)))
set.seed(1)
pcv_stag.1 <- PanelCrossValidationStag(data = newdata, ML_methods = list(enet, linreg, pls))
set.seed(1)
causal_stag.1 <- MLCMStag(data = newdata, int_date = "int_date", inf_type = "block", nboot = 10, PCV = pcv_stag.1, y.lag = 2)
expect_equal(causal_stag.1$group_ate, causal_stag$group_ate)
# Organizing the dataset
newdata <- as.PanelMLCM(y = data[, "Y"], timevar = data[, "year"], id = data[, "ID"],
x = data[, !(names(data) %in% c("Y", "ID", "year"))], y.lag = 1)
# Using the first two years for training and the last two years for testing
indices <- CAST::CreateSpacetimeFolds(newdata, timevar = "Time", k = length(unique(newdata$Time)))
trainx <- indices$indexOut[1:2]
testx <- indices$indexOut[3:4]
ctrl <- trainControl(index = trainx, indexOut = testx)
# Customized panel cross validation
pcv <- PanelCrossValidation(data = newdata, int_date = 2019, trControl = ctrl)
### Example 2. Changing ML methods and estimating ATE
set.seed(1)
enet <- list(method = "enet",
tuneGrid = expand.grid(
fraction = seq(0.1, 0.9, by = 0.1),
lambda = seq(0.1, 0.9, by = 0.1)))
linreg <- list(method = "lm",
tuneGrid = expand.grid(
intercept = seq(0, 10, by = 0.5)))
pls <- list(method = "pls", tuneGrid = expand.grid(ncomp = c(1:5)))
pcv <- PanelCrossValidation(data = newdata, int_date = 2019, trControl = ctrl,
ML_methods = list(enet, linreg, pls))
pcv$best$method
pcv$best$bestTune
pcv$best$results
set.seed(1)
# Assume the following intervention dates
int_year_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_year <- rep(int_year_i, each = length(unique(data$year)))
# Define data_stag
data_stag <- data.frame(int_year, data)
# Organizing the dataset with as.PanelMLCM
newdata <- as.PanelMLCM(y = data_stag[, "Y"], timevar = data_stag[, "year"], id = data_stag[, "ID"],
int_date = data_stag[, "int_year"],
x = data_stag[, !(names(data_stag) %in% c("Y", "ID", "year", "int_year"))], y.lag = 2)
# Panel Cross Validation in a staggered setting with different ML methods
pcv_stag <- PanelCrossValidationStag(data = newdata, ML_methods = list(enet, linreg, pls))
lapply(pcv_stag, function(x)(x$best$method))
lapply(pcv_stag, function(x)(x$best$bestTune))
names(pcv)
names(pcv_stag)
names(pcv_stag[[1]])
newdata <- as.PanelMLCM(y = data[, "Y"], timevar = data[, "year"], id = data[, "ID"],
x = data[, !(names(data) %in% c("Y", "ID", "year"))], y.lag = 1)
# PCV with enet, linreg and pls
enet <- list(method = "enet",
tuneGrid = expand.grid(
fraction = seq(0.1, 0.9, by = 0.1),
lambda = seq(0.1, 0.9, by = 0.1)))
linreg <- list(method = "lm",
tuneGrid = expand.grid(
intercept = seq(0, 10, by = 0.5)))
pls <- list(method = "pls", tuneGrid = expand.grid(ncomp = c(1:5)))
pcv <- PanelCrossValidation(data = newdata, int_date = 2019,
ML_methods = list(enet, linreg, pls))
# ATE estimation and inference
causal <- MLCM(data = newdata, int_date = 2019, inf_type = "classic", PCV = pcv,
nboot = 10, CATE = FALSE, y.lag = 2)
library(MachineControl)
newdata <- as.PanelMLCM(y = data[, "Y"], timevar = data[, "year"], id = data[, "ID"],
x = data[, !(names(data) %in% c("Y", "ID", "year"))],
y.lag = 2)
# PCV with enet, linreg and pls
enet <- list(method = "enet",
tuneGrid = expand.grid(
fraction = seq(0.1, 0.9, by = 0.1),
lambda = seq(0.1, 0.9, by = 0.1)))
linreg <- list(method = "lm",
tuneGrid = expand.grid(
intercept = seq(0, 10, by = 0.5)))
pls <- list(method = "pls", tuneGrid = expand.grid(ncomp = c(1:5)))
pcv <- PanelCrossValidation(data = newdata, int_date = 2019,
ML_methods = list(enet, linreg, pls))
# ATE estimation and inference
causal <- MLCM(data = newdata, int_date = 2019, inf_type = "classic", PCV = pcv,
nboot = 10, CATE = FALSE, y.lag = 2)
causal$ate
plot(causal, type = "ate")
plot(causal, type = "ate") + theme_bc()
library(ggplot2)
plot(causal, type = "ate") + theme_bc()
plot(causal, type = "ate") + theme_bw()
g <- plot(causal, type = "ate")
g
g + theme_bw()
g + theme_bw
g + theme_dark()
g + theme_dark
g <- plot(causal, type = "ate")
g
g$ate + theme_bw()
x.cate <- cbind(ID = rep(1:100, each = 2), year = rep(2019:2020, times = 100), x1 = rnorm(200),
x2 = 2*rnorm(200), x3 = sample(1:5, size = 200, replace = TRUE))
# Estimation
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
# CATE
plot(fit, type = "cate")
newdata <- as.PanelMLCM(y = data[, "Y"], timevar = data[, "year"], id = data[, "ID"],
x = data[, !(names(data) %in% c("Y", "ID", "year"))],
y.lag = 2)
library(MachineControl)
newdata <- as.PanelMLCM(y = data[, "Y"], timevar = data[, "year"], id = data[, "ID"],
x = data[, !(names(data) %in% c("Y", "ID", "year"))],
y.lag = 2)
# PCV with enet, linreg and pls
enet <- list(method = "enet",
tuneGrid = expand.grid(
fraction = seq(0.1, 0.9, by = 0.1),
lambda = seq(0.1, 0.9, by = 0.1)))
linreg <- list(method = "lm",
tuneGrid = expand.grid(
intercept = seq(0, 10, by = 0.5)))
pls <- list(method = "pls", tuneGrid = expand.grid(ncomp = c(1:5)))
pcv <- PanelCrossValidation(data = newdata, int_date = 2019,
ML_methods = list(enet, linreg, pls))
class(pcv$best)
