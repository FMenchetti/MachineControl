which(data[data$int_date == 2019, "Time"] < 2019)
View(data[data$int_date == 2019, ])
View(data[data$int_date == 2019, ][pre,])
View(data[data$int_date == 2019, ][pre[[1]],])
View(data[data$int_date == 2019, ][pre[[2]],])
View(data[data$int_date == 2020, ][pre[[2]],])
View(ii[[1]])
View(data[data$int_date == 2019, ][pre[[1]],])
length(bestt)
fit <- MLCM(data = data2, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "classic", nboot = 10, y.lag = 2)
eff_boot <- mapply(i = ii, p = post, b = bestt, function(i, p, b){ate_est_multi(data = data[c(i, p),], best = b, metric = metric, ran.err = TRUE, y.lag = y.lag)})
eff_boot <- mapply(i = ii, p = post, b = bestt, FUN = function(i, p, b){ate_est_multi(data = data[c(i, p),], best = b, metric = metric, ran.err = TRUE, y.lag = y.lag)})
eff_boot <- mapply(i = ii, p = post, function(i, p){ate_est_multi(data = data[c(i, p),], best = bestt, metric = metric, ran.err = TRUE, y.lag = y.lag)})
eff_boot <- mapply(i = ii, p = post, function(i, p){ate_est_multi(data = data[c(i, p),], best = bestt, metric = metric, ran.err = TRUE, y.lag = y.lag)}, SIMPLIFY = FALSE)
fit <- MLCM(data = data2, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "classic", nboot = 10, y.lag = 2)
View(ate_i)
View(data)
length(unique(data$ID))
View(data)
fit <- MLCM(data = data2, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "classic", nboot = 10, y.lag = 2)
fit <- MLCM(data = data2, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "classic", nboot = 10, y.lag = 2)
fit <- MLCM(data = data2, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "classic", nboot = 10, y.lag = 2)
View(ta_ind_effects)
prova <- mapply(x = nint, y = best, FUN = function(x,y){datax <- data_panel[data_panel$int_date == x,]
datax$int_date <- NULL
boot_ate(data = datax, int_date = x, bestt = y, type = inf_type, nboot = nboot,
ate = global_ate, ind.eff = ta_ind_effects[, -ind], alpha = alpha, metric = metric, y.lag = y.lag)}, SIMPLIFY = FALSE)
View(prova[[1]]$ate_boot)
boot_inf <- mapply(x = nint, y = best, FUN = function(x,y){datax <- data_panel[data_panel$int_date == x,]
datax$int_date <- NULL
boot_ate(data = datax, int_date = x, bestt = y, type = inf_type, nboot = nboot,
ate = global_ate, ind.eff = ta_ind_effects[, -ind], alpha = alpha, metric = metric, y.lag = y.lag)}, SIMPLIFY = FALSE)
global_ate_boot <- sapply(boot_inf, FUN = function(x)(colMeans(x$ate_boot)))
View(global_ate_boot)
0.5*(80.23+60.20)
0.5*(80.24+60.21)
0.5*(79.32+60.28)
colMeans(boot_inf[[1]]$ate_boot)
boot_inf[[1]]$ate_boot
boot_inf[[2]]$ate_boot
global_ate_boot <- rowMeans(sapply(boot_inf, FUN = function(x)(colMeans(x$ate_boot))))
global_ate_boot
alpha/2
1-alpha/2
quantile(global_ate_boot, probs = c(alpha/2, 1- alpha/2))
boot_inf[[2]]$conf.ate
class(boot_inf[[1]]$ind_boot)
dim(boot_inf[[1]]$ind_boot)
dim(boot_inf[[2]]$ind_boot)
View(boot_inf[[1]]$ind_boot)
length(data_panel$int_date == 2019))
length(data_panel$int_date == 2019)
sum(data_panel$int_date == 2019)
View(boot_inf[[1]]$ind_boot)
fit <- MLCM(data = data2, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "classic", nboot = 10, y.lag = 2)
View(ta_ind_effects)
View(ind_boot)
View(eff_boot[[1]]$ind_effects)
View(ind_boot)
View(data)
View(ind_boot)
prova <- matrix(c(1,2,3,4,5,6,7,8,9,10,11,12), nrow = 3, ncol = 4, byrow = T)
prova
array(prova, dim = c(2,4,2))
asplit(prova, 1)
c(prova)
array(c(prova), dim = c(2,4,2))
array(c(prova), dim = c(4,2,2))
unlist(asplit(prova, 1))
array(c(prova), dim = c(4,2,2), byrow = T)
array(c(prova), dim = c(4,2,2), by.row = T)
c(prova)
prova
r(prova)
t(c(prova))
unlist(asplit(prova, 1))
array(unlist(asplit(prova, 1)), dim = c(2,4,2)
)
array(unlist(asplit(prova, 1)), dim = c(4,2,2))
fit <- MLCM(data = data2, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "classic", nboot = 10, y.lag = 2)
boot_inf[[1]]$ind_boot
View(boot_inf[[1]]$ind_boot)
class(boot_inf[[1]]$ind_boot)
View(ta_ind_effects)
boot_inf[[1]]$ate_boot
NROW(boot_inf[[1]]$ate_boot
)
c(nboot, nrow(boot_inf[[1]]$ind_boot)/2 ,2)
NROW(boot_inf[[2]]$ate_boot
)
nrow(boot_inf[[2]]$ind_boot)
tempavg_ind <- lapply(boot_inf, FUN = function(x){n <- NROW(x$ate_boot)
asvec <- unlist(asplit(x$ind_boot, 1))
array(asvec, dim = c(nboot, nrow(x$ind_boot)/n ,n))})
View(tempavg_ind[[1]])
View(tempavg_ind[[1]][,,1])
View(tempavg_ind[[1]][,,2])
prova <- apply(tempavg_ind[[2]], 3, mean)
prova <- apply(tempavg_ind[[2]], c(1,2), mean)
View(prova)
View(tempavg_ind[[2]][,,1])
prova <- apply(tempavg_ind[[1]], c(1,2), mean)
View(prova)
View(0.5*(tempavg_ind[[1]][,,1] + tempavg_ind[[1]][,,2]))
identical(prova, 0.5*(tempavg_ind[[1]][,,1] + tempavg_ind[[1]][,,2]))
tempavg_ind <- lapply(boot_inf, FUN = function(x){n <- NROW(x$ate_boot)
asvec <- unlist(asplit(x$ind_boot, 1))
asarr <- array(asvec, dim = c(nboot, nrow(x$ind_boot)/n ,n))}
apply(asarr, c(1,2), mean))
tempavg_ind <- lapply(boot_inf, FUN = function(x){n <- NROW(x$ate_boot)
asvec <- unlist(asplit(x$ind_boot, 1))
asarr <- array(asvec, dim = c(nboot, nrow(x$ind_boot)/n ,n))
apply(asarr, c(1,2), mean)})
View(tempavg_ind)
View(tempavg_ind[[1]])
length(global_ate_boot)
conf.tempavg.ind <- lapply(tempavg_ind, FUN = function(x)(quantile(x, probs = c(alpha/2, 1- alpha/2))))
View(conf.tempavg.ind[[1]])
conf.tempavg.ind <- lapply(tempavg_ind, FUN = function(x)(apply(x, 2, quantile, probs = c(alpha/2, 1- alpha/2))))
View(conf.tempavg.ind[[1]])
View(conf.tempavg.ind[[2]])
prova <- do.call("rbind", conf.tempavg.ind)
prova <- do.call("cbind", conf.tempavg.ind)
View(prova)
View(conf.tempavg.ind[[1]])
prova <- t(do.call("cbind", conf.tempavg.ind))
View(prova)
View(boot_inf[[1]]$conf.individual)
dim(boot_inf[[1]]$conf.individual)
dim(boot_inf[[1]]$conf.individual[,,1])
View(boot_inf[[1]]$conf.individual[,,1])
which(data_panel$int_date == nint[1], "ID")
unique(data_panel[data_panel$int_date == nint[1], "ID"])
sapply(nint, FUN = function(x)(unique(data_panel[data_panel$int_date == x, "ID"])))
sapply(nint, FUN = function(x)(unique(data_panel[data_panel$int_date == x, "ID"])), simplify = T)
unlist(sapply(nint, FUN = function(x)(unique(data_panel[data_panel$int_date == x, "ID"]))))
rep(c(2,3), each = c(1,2))
mapply(x=c(2,3), y=c(3,4), FUN = function(x,y)(rep(x, each = y)) )
length(nint)
prova <- t(do.call("cbind", conf.tempavg.ind))
View(data.frame(ID = unlist(sapply(nint, FUN = function(x)(unique(data_panel[data_panel$int_date == x, "ID"])))),
int_date = unlist(sapply(x = nint, FUN = function(x)(rep(x, each = sum(data_panel$int_date == x))))),
prova))
data.frame(ID = unlist(sapply(nint, FUN = function(x)(unique(data_panel[data_panel$int_date == x, "ID"])))),
int_date = unlist(sapply(x = nint, FUN = function(x)(rep(x, each = sum(data_panel$int_date == x))))),
prova)
sapply(x = nint, FUN = function(x)(rep(x, each = sum(data_panel$int_date == x))))
sapply(nint, FUN = function(x)(rep(x, each = sum(data_panel$int_date == x))))
View(data.frame(ID = unlist(sapply(nint, FUN = function(x)(unique(data_panel[data_panel$int_date == x, "ID"])))),
int_date = unlist(sapply(nint, FUN = function(x)(rep(x, each = sum(data_panel$int_date == x))))),
prova))
length(unlist(sapply(nint, FUN = function(x)(rep(x, each = sum(data_panel$int_date == x))))))
nint
sum(data_panel$int_date == 2019)
unique(data_panel[data_panel$int_date == 2019, c("ID", "int_date")])
conf.tempavg.ind <- lapply(tempavg_ind, FUN = function(x)(apply(x, 2, quantile, probs = c(alpha/2, 1- alpha/2))))
conf.tempavg.ind <- t(do.call("cbind", conf.tempavg.ind))
View(data.frame(unlist(sapply(nint, FUN = function(x)(unique(data_panel[data_panel$int_date == x, c("ID", "int_date")])))),
conf.tempavg.ind))
sapply(nint, FUN = function(x)(unique(data_panel[data_panel$int_date == x, c("ID", "int_date")])))
sapply(nint, FUN = function(x)(unique(data_panel[data_panel$int_date == x, c("ID", "int_date")])), simplify = F)
View(data.frame(do.call("cbind", sapply(nint, FUN = function(x)(unique(data_panel[data_panel$int_date == x, c("ID", "int_date")])), simplify = FALSE)),
conf.tempavg.ind))
View(data.frame(do.call("rbind", sapply(nint, FUN = function(x)(unique(data_panel[data_panel$int_date == x, c("ID", "int_date")])), simplify = FALSE)),
conf.tempavg.ind))
global_ate
int_year_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_year <- rep(int_year_i, each = length(unique(data$year)))
# Define data_stag
data_stag <- data.frame(int_year, data)
# Organizing the dataset with as.PanelMLCM
newdata <- as.PanelMLCM(y = data_stag[, "Y"], timevar = data_stag[, "year"], id = data_stag[, "ID"],
int_date = data_stag[, "int_year"],
x = data_stag[, !(names(data) %in% c("Y", "ID", "year", "int_year"))], y.lag = 1)
# Panel Cross Validation in a staggered setting
pcv <- PanelCrossValidationMulti(data = newdata)
# ATE estimation
causal <- MLCM(data = newdata, int_date = "int_date", inf_type = "block", nboot = 10, pcv = pcv)
class(newdata)
# ATE estimation
causal <- MLCM(data = newdata, int_date = "int_date", inf_type = "block", nboot = 10, pcv = pcv)
if(!"PanelMLCM" %in% class(data) & any(c(is.null(y), is.null(timevar), is.null(id)))) stop("y or id or timevar are missing with no default")
ck
ck
any(ck)
!(is.null(y) | par %in% colnames(y))
!(is.null(y) | y %in% colnames(y))
is.null(y)
y %in% colnames(y)
y %in% colnames(data)
y
class(y) == "character"
!(is.null(y) | y %in% colnames(data))
as.logical(!(is.null(y) | y %in% colnames(data)))
mapply(list(y, timevar, id), FUN = function(par)(!(is.null(par) | par %in% colnames(data))))
mapply(list(y, timevar, id), FUN = function(par)(!(is.null(par) | par %in% colnames(data))), SIMPLIFY = F)
unlist(mapply(list(y, timevar, id), FUN = function(par)(!(is.null(par) | par %in% colnames(data)))))
ck <- unlist(mapply(list(y, timevar, id), FUN = function(par)(!(is.null(par) | par %in% colnames(data)))))
any(ck)
unlist(c(1,2,3))
# ATE estimation
causal <- MLCM(data = newdata, int_date = "int_date", inf_type = "block", nboot = 10, pcv = pcv)
# ATE estimation
causal <- MLCM(data = newdata, int_date = "int_date", inf_type = "block", nboot = 10, PCV = pcv)
# ATE estimation
causal <- MLCM(data = newdata, int_date = "int_date", inf_type = "block", nboot = 10, PCV = pcv)
# ATE estimation
causal <- MLCM(data = newdata, int_date = "int_date", inf_type = "block", nboot = 10, PCV = pcv)
class(PCV)
class(PCV[[1]])
PCV[[1]]$best
class(PCV[[1]]$best)
any(sapply(PCV, function(x)(!"train" %in% class(x$best))))
# ATE estimation
causal <- MLCM(data = newdata, int_date = "int_date", inf_type = "block", nboot = 10, PCV = pcv)
# ATE estimation
causal <- MLCM(data = newdata, int_date = "int_date", inf_type = "block", nboot = 10, PCV = pcv)
(!"train" %in% class(PCV) | any(sapply(PCV, function(x)(!"train" %in% class(x$best)))))
!"train" %in% class(PCV)
class(PCV)
"train" %in% class(PCV)
is.null(PCV)
!is.null(PCV)
any(sapply(PCV, function(x)(!"train" %in% class(x$best))))
(!"train" %in% class(PCV) & any(sapply(PCV, function(x)(!"train" %in% class(x$best)))))
# ATE estimation
causal <- MLCM(data = newdata, int_date = "int_date", inf_type = "block", nboot = 10, PCV = pcv)
# ATE estimation
causal <- MLCM(data = newdata, int_date = "int_date", inf_type = "block", nboot = 10, PCV = pcv)
# ATE estimation
causal <- MLCM(data = newdata, int_date = "int_date", inf_type = "block", nboot = 10, PCV = pcv)
class(best)
class(best[[1]])
causal$ate
causal$conf.global.ate
# ATE estimation
causal <- MLCM(data = newdata, int_date = "int_date", inf_type = "block", nboot = 10, PCV = pcv, y.lag = 2)
causal$ate
# ATE estimation
causal <- MLCM(data = newdata, int_date = "int_date", inf_type = "block", nboot = 10, y.lag = 2)
View(ate_i)
View(ate_i[[1]]$ind_effects)
best$int_2019$method
ate_i[[1]]$ate
View(data_stag)
causal <- MLCM(data = data_stag, int_date = "int_date", y = "Y" , timevar = "year", id = "ID", inf_type = "block", nboot = 10, y.lag = 2)
causal <- MLCM(data = data_stag, int_date = "int_year", y = "Y" , timevar = "year", id = "ID", inf_type = "block", nboot = 10, y.lag = 2)
causal$ate
causal$conf.global.ate
causal$best_method
newdata <- as.PanelMLCM(y = data_stag[, "Y"], timevar = data_stag[, "year"], id = data_stag[, "ID"],
int_date = data_stag[, "int_year"],
x = data_stag[, !(names(data) %in% c("Y", "ID", "year", "int_year"))], y.lag = 2)
pcv <- PanelCrossValidationMulti(data = newdata)
pcv$int_2019
pcv$int_2020
causal <- MLCM(data = newdata, int_date = "int_date", inf_type = "block", nboot = 10, pcv = pcv)
causal <- MLCM(data = newdata, int_date = "int_date", inf_type = "block", nboot = 10, PCV = pcv)
best$int_2019
best$int_2020
View(best$int_2019$trainingData)
dim(best$int_2019$trainingData)
newdata <- as.PanelMLCM(y = data_stag[, "Y"], timevar = data_stag[, "year"], id = data_stag[, "ID"],
int_date = data_stag[, "int_year"],
x = data_stag[, !(names(data) %in% c("Y", "ID", "year", "int_year"))], y.lag = 2)
causal <- MLCM(data = data_stag, int_date = "int_year", y = "Y" , timevar = "year", id = "ID", inf_type = "block", nboot = 10, y.lag = 2)
best$int_2019
dim(best$int_2019$trainingData)
View(best$int_2019$trainingData)
View(data_panel)
View(best$int_2020$trainingData)
dim(best$int_2020$trainingData)
View(data_panel)
dim(data_panel)
dim(data)
newdata <- as.PanelMLCM(y = data_stag[, "Y"], timevar = data_stag[, "year"], id = data_stag[, "ID"],
int_date = data_stag[, "int_year"],
x = data_stag[, !(names(data) %in% c("Y", "ID", "year", "int_year"))], y.lag = 2)
View(newdata)
colnames(newdata)
colnames(data_stag)
colnames(data)
newdata <- as.PanelMLCM(y = data_stag[, "Y"], timevar = data_stag[, "year"], id = data_stag[, "ID"],
int_date = data_stag[, "int_year"],
x = data_stag[, !(names(data) %in% c("Y", "ID", "year", "int_year"))], y.lag = 2)
!(names(data) %in% c("Y", "ID", "year", "int_year"))
newdata <- as.PanelMLCM(y = data_stag[, "Y"], timevar = data_stag[, "year"], id = data_stag[, "ID"],
int_date = data_stag[, "int_year"],
x = data_stag[, !(names(data_stag) %in% c("Y", "ID", "year", "int_year"))], y.lag = 2)
colnames(newdata)
colnames(data_stag)
pcv <- PanelCrossValidationMulti(data = newdata)
pcv$int_2019
pcv$int_2019$best
causal <- MLCM(data = newdata, int_date = "int_date", inf_type = "block", nboot = 10, pcv = pcv)
causal <- MLCM(data = newdata, int_date = "int_date", inf_type = "block", nboot = 10, PCV = pcv)
causal$ate
causal$conf.global.ate
int_year_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_year <- rep(int_year_i, each = length(unique(data$year)))
# Define data_stag
data_stag <- data.frame(int_year, data)
# Organizing the dataset with as.PanelMLCM
newdata <- as.PanelMLCM(y = data_stag[, "Y"], timevar = data_stag[, "year"], id = data_stag[, "ID"],
int_date = data_stag[, "int_year"],
x = data_stag[, !(names(data_stag) %in% c("Y", "ID", "year", "int_year"))], y.lag = 2)
# Panel Cross Validation in a staggered setting
pcv <- PanelCrossValidationMulti(data = newdata)
# ATE estimation
causal <- MLCM(data = newdata, int_date = "int_date", inf_type = "block", nboot = 10, PCV = pcv)
causal$global_ate
class(pcv)
class(pcv[[1]])
names(pcv[[1]])
pcv[[1]]$best.metric
pcv[[1]]$all_methods
newdata <- as.PanelMLCM(y = data[, "Y"], timevar = data[, "year"], id = data[, "ID"],
x = data[, !(names(data) %in% c("Y", "ID", "year"))], y.lag = 1)
# Using the first two years for training and the last two years for testing
indices <- CAST::CreateSpacetimeFolds(newdata, timevar = "Time", k = length(unique(newdata$Time)))
trainx <- indices$indexOut[1:2]
testx <- indices$indexOut[3:4]
ctrl <- trainControl(index = trainx, indexOut = testx)
# Customized panel cross validation
pcv <- PanelCrossValidation(data = newdata, int_date = 2019, trControl = ctrl)
### Example 2. Changing ML methods and estimating ATE
enet <- list(method = "enet",
tuneGrid = expand.grid(
fraction = seq(0.1, 0.9, by = 0.1),
lambda = seq(0.1, 0.9, by = 0.1)))
linreg <- list(method = "lm",
tuneGrid = expand.grid(
intercept = seq(0, 10, by = 0.5)))
pcv <- PanelCrossValidation(data = newdata, int_date = 2019, trControl = ctrl,
ML_methods = list(enet, linreg))
causal <- MLCM(data = newdata, int_date = 2019, inf_type = "classic", PCV = pcv$best,
nboot = 10, CATE = FALSE)
causal$ate
causal$conf.ate
causal <- MLCM(data = newdata, int_date = 2019, inf_type = "classic", PCV = pcv$best,
nboot = 10, CATE = FALSE)
is.null(PCV)
class(PCV)
newdata <- as.PanelMLCM(y = data[, "Y"], timevar = data[, "year"], id = data[, "ID"],
x = data[, !(names(data) %in% c("Y", "ID", "year"))], y.lag = 1)
# Using the first two years for training and the last two years for testing
indices <- CAST::CreateSpacetimeFolds(newdata, timevar = "Time", k = length(unique(newdata$Time)))
trainx <- indices$indexOut[1:2]
testx <- indices$indexOut[3:4]
ctrl <- trainControl(index = trainx, indexOut = testx)
# Customized panel cross validation
pcv <- PanelCrossValidation(data = newdata, int_date = 2019, trControl = ctrl)
### Example 2. Changing ML methods and estimating ATE
enet <- list(method = "enet",
tuneGrid = expand.grid(
fraction = seq(0.1, 0.9, by = 0.1),
lambda = seq(0.1, 0.9, by = 0.1)))
linreg <- list(method = "lm",
tuneGrid = expand.grid(
intercept = seq(0, 10, by = 0.5)))
pcv <- PanelCrossValidation(data = newdata, int_date = 2019, trControl = ctrl,
ML_methods = list(enet, linreg))
causal <- MLCM(data = newdata, int_date = 2019, inf_type = "classic", PCV = pcv,
nboot = 10, CATE = FALSE)
causal <- MLCM(data = newdata, int_date = 2019, inf_type = "classic", PCV = pcv,
nboot = 10, CATE = FALSE)
is.null(PCV)
!"train" %in% class(PCV$best)
any(sapply(PCV, function(x)(!"train" %in% class(x$best))))
causal <- MLCM(data = newdata, int_date = 2019, inf_type = "classic", PCV = pcv,
nboot = 10, CATE = FALSE)
causal <- MLCM(data = newdata, int_date = 2019, inf_type = "classic", PCV = pcv,
nboot = 10, CATE = FALSE)
!is.null(PCV) & !is.character(int_date) & (!"train" %in% class(PCV$best))
!is.null(PCV)
!is.character(int_date)
(!"train" %in% class(PCV$best))
!is.null(PCV) & is.character(int_date)
if(!is.null(PCV) & is.character(int_date)){if(any(sapply(PCV, function(x)(!"train" %in% class(x$best))))) stop("Invalid PCV method, it should be a list returned from a previous call to 'PanelCrossValidationMulti()' ")}
newdata <- as.PanelMLCM(y = data[, "Y"], timevar = data[, "year"], id = data[, "ID"],
x = data[, !(names(data) %in% c("Y", "ID", "year"))], y.lag = 1)
# Using the first two years for training and the last two years for testing
indices <- CAST::CreateSpacetimeFolds(newdata, timevar = "Time", k = length(unique(newdata$Time)))
trainx <- indices$indexOut[1:2]
testx <- indices$indexOut[3:4]
ctrl <- trainControl(index = trainx, indexOut = testx)
# Customized panel cross validation
pcv <- PanelCrossValidation(data = newdata, int_date = 2019, trControl = ctrl)
### Example 2. Changing ML methods and estimating ATE
enet <- list(method = "enet",
tuneGrid = expand.grid(
fraction = seq(0.1, 0.9, by = 0.1),
lambda = seq(0.1, 0.9, by = 0.1)))
linreg <- list(method = "lm",
tuneGrid = expand.grid(
intercept = seq(0, 10, by = 0.5)))
pcv <- PanelCrossValidation(data = newdata, int_date = 2019, trControl = ctrl,
ML_methods = list(enet, linreg))
causal <- MLCM(data = newdata, int_date = 2019, inf_type = "classic", PCV = pcv,
nboot = 10, CATE = FALSE)
causal$ate
causal$conf.ate
causal$ate
causal$conf.ate
class(as.Date("2018-10-06"))
18.66/2
8.6*2
19.60-18.66
0.94/19.60
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, y.lag = 2)
# ATE
fit$ate
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, y.lag = 2)
# ATE
fit$ate
fit$conf.ate
# Individual effects
head(fit$ind.effects)
head(fit$conf.individual)
# Simulating time-varying external regressors
x.cate <- cbind(ID = rep(1:100, each = 2), year = rep(2019:2020, times = 100), x1 = rnorm(200),
x2 = 2*rnorm(200), x3 = sample(1:5, size = 200, replace = TRUE))
# Estimation
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
names(fit)
colnames(x.cate)
# Simulating time-varying external regressors
x.cate <- cbind(ID = rep(1:100, each = 2), year = rep(2019:2020, times = 100), x1 = rnorm(200),
x2 = 2*rnorm(200), x3 = sample(1:5, size = 200, replace = TRUE))
# Estimation
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
# CATE
fit$cate.inf
colnames(data_panel)
colnames(x.cate)
cate_effects <- cate_est(data = data_panel, int_date = int_date, ind_effects = ind_effects, x.cate = x.cate, nboot = nboot, alpha = alpha)
# Simulating time-varying external regressors
x.cate <- cbind(ID = rep(1:100, each = 2), year = rep(2019:2020, times = 100), x1 = rnorm(200),
x2 = 2*rnorm(200), x3 = sample(1:5, size = 200, replace = TRUE))
# Estimation
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
# CATE
fit$cate.inf
colnames(data_cate)
colnames(x.cate)
# Simulating time-varying external regressors
x.cate <- cbind(ID = rep(1:100, each = 2), year = rep(2019:2020, times = 100), x1 = rnorm(200),
x2 = 2*rnorm(200), x3 = sample(1:5, size = 200, replace = TRUE))
# Estimation
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
# Simulating time-varying external regressors
x.cate <- cbind(ID = rep(1:100, each = 2), year = rep(2019:2020, times = 100), x1 = rnorm(200),
x2 = 2*rnorm(200), x3 = sample(1:5, size = 200, replace = TRUE))
# Estimation
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
# CATE
fit$cate.inf
colnames(x.cate)
# Simulating time-varying external regressors
x.cate <- cbind(ID = rep(1:100, each = 2), year = rep(2019:2020, times = 100), x1 = rnorm(200),
x2 = 2*rnorm(200), x3 = sample(1:5, size = 200, replace = TRUE))
# Estimation
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
# CATE
fit$cate.inf
x.cate <- check_xcate(x.cate = x.cate, data = data, id = id, timevar = timevar)
colnames(x.cate)
# Simulating time-varying external regressors
x.cate <- cbind(ID = rep(1:100, each = 2), year = rep(2019:2020, times = 100), x1 = rnorm(200),
x2 = 2*rnorm(200), x3 = sample(1:5, size = 200, replace = TRUE))
# Estimation
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
# CATE
fit$cate.inf
View(x.cate)
# Simulating time-varying external regressors
x.cate <- cbind(ID = rep(1:100, each = 2), year = rep(2019:2020, times = 100), x1 = rnorm(200),
x2 = 2*rnorm(200), x3 = sample(1:5, size = 200, replace = TRUE))
# Estimation
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
# CATE
fit$cate.inf
colnames(x.cate)
x.cate <- cbind(ID = rep(1:100, each = 2), year = rep(2019:2020, times = 100), x1 = rnorm(200),
x2 = 2*rnorm(200), x3 = sample(1:5, size = 200, replace = TRUE))
# Estimation
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
x.cate <- cbind(ID = rep(1:100, each = 2), year = rep(2019:2020, times = 100), x1 = rnorm(200),
x2 = 2*rnorm(200), x3 = sample(1:5, size = 200, replace = TRUE))
# Estimation
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
# CATE
fit$cate.inf
