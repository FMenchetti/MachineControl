#gbmGrid <-  expand.grid(interaction.depth = c(1),
# n.trees=c(500),
# shrinkage = c(0.0001),
#  n.minobsinnode = c(10))
# gbm <- list(method="gbm", tuneGrid = gbmGrid)
rf <- list(method="rf", tuneGrid = expand.grid(mtry = c(3,6,9)), ntree=1000)
lambda <- 10^seq(-1000, 1000, length = 100)
lasso <- list(method="glmnet", tuneGrid = expand.grid(alpha = 1, lambda = lambda))
pcv <- PanelCrossValidationMulti(data = newdata, ML_methods = list(lasso, rf))
fit <- MLCM(data = newdata, int_date = "int_date",
inf_type = "block", nboot = 1000, CATE = FALSE, PCV=pcv, y.lag=1)
global_placebo <- mapply(x = mat, w = placebo.weights, FUN = function(x,w)(weighted.mean(x = x, w = w))) # riprendi da qui, fare in modo che dove ci sono gli 0 i pesi si devono redistribuire
global_placebo
mat
placebo.weights
mapply(x = mat, w = placebo.weights, FUN = function(x,w)(weighted.mean(x = x, w = w)))
sapply(1:3, FUN = function(i)(weighted.mean(mat[,i], w = placebo.weights[,i])))
sapply(1:ncol(mat), FUN = function(i)(weighted.mean(mat[,i], w = placebo.weights[,i])))
weighted.mean(mat[, "2002"], w = placebo.weights[,"2002"])
table(data_panel$int_date)/nrow(data_panel)
weighted.mean(mat[, "2002"], w = table(data_panel$int_date)/nrow(data_panel))
weighted.mean(mat[, "2003"], w = table(data_panel$int_date)/nrow(data_panel))
weighted.mean(mat[, "2004"], w = placebo.weights[,"2004"])
mat[, "2004"]
mat[-1, "2004"]
weighted.mean(mat[-1, "2004"], w = placebo.weights[-1,"2004"])
weighted.mean(mat[-1, "2005"], w = placebo.weights[-1,"2005"])
rm(list=ls())
library(MachineControl)
set.seed(1)
data <- read.csv("C:\\Users\\fiamm\\Downloads\\cs_mlcm.csv")
#data <- read.csv("G:\\Drive condivisi\\MLCM\\replication CS 2021\\cs_mlcm.csv")
names(data)
# Organizing the dataset with as.PanelMLCM
newdata <- as.PanelMLCM(y = data[, "lemp"], timevar = data[, "year"], id = data[, "countyreal"],
int_date = data[, "firsttreat"],
x = data[, !(names(data) %in% c("lemp", "countyreal", "year", "firsttreat"))], y.lag = 1)
#lm <- list(method = "lm",  tuneGrid = expand.grid(intercept=TRUE))
#gbmGrid <-  expand.grid(interaction.depth = c(1),
# n.trees=c(500),
# shrinkage = c(0.0001),
#  n.minobsinnode = c(10))
# gbm <- list(method="gbm", tuneGrid = gbmGrid)
rf <- list(method="rf", tuneGrid = expand.grid(mtry = c(3,6,9)), ntree=1000)
lambda <- 10^seq(-1000, 1000, length = 100)
lasso <- list(method="glmnet", tuneGrid = expand.grid(alpha = 1, lambda = lambda))
pcv <- PanelCrossValidationMulti(data = newdata, ML_methods = list(lasso, rf))
fit <- MLCM(data = newdata, int_date = "int_date",
inf_type = "block", nboot = 1000, CATE = FALSE, PCV=pcv, y.lag=1)
global_ate
conf.global.ate
class(boot_inf$int_2007$placebo_boot)
dim(boot_inf$int_2007$placebo_boot)
View(boot_inf$int_2007$placebo_boot)
View(boot_inf$int_2007$ate_boot)
View(boot_inf$int_2004$ate_boot)
ate_i$int_2004
sapply(boot_inf, FUN = function(x)(rowMeans(x$ate_boot)))
table(data_panel$int_date)
nrow(data_panel)
weighted.mean(c(0.008014044,0.14462474), w = c(1338/(1338+600), 600/(1338+600)))
weighted.mean(c(-0.0218671 ,-0.021043432, 0.13563419), w = c(3504/5442, 1338/5442, 600/5442))
mean(c(-0.09327978, -0.12856871, 0.05030838, -0.004299507))
View(boot_inf$int_2007$placebo_boot)
sapply(boot_inf, FUN = function(x)(rowMeans(x$placebo_boot)))
sapply(boot_inf, FUN = function(x)(quantile(x$placebo_boot, probs = c(alpha/2, 1- alpha/2))))
sapply(boot_inf, FUN = function(x)(apply(x$placebo_boot, quantile, probs = c(alpha/2, 1- alpha/2))))
sapply(boot_inf, FUN = function(x)(apply(x$placebo_boot, FUN = quantile, probs = c(alpha/2, 1- alpha/2))))
sapply(boot_inf, FUN = function(x)(apply(x$placebo_boot, 1, FUN = quantile, probs = c(alpha/2, 1- alpha/2))))
placebo.pre
post.int
placebo.post
table(data_panel$int_date[data_panel$int_date>2004])/sum(data_panel$int_date>2004)
table(data_panel$int_date[data_panel$int_date<=2004])/sum(data_panel$int_date<=2004)
table(data_panel$int_date[data_panel$int_date<=2005])/sum(data_panel$int_date<=2005)
w <- table(data_panel$int_date[data_panel$int_date<=2005])/sum(data_panel$int_date<=2005)
int.dates[which(!int.dates %in% names(w))]
add <- int.dates[which(!int.dates %in% names(w))]
w <- c(w, setNames(rep(0, length(add)), add))
w
w <- table(data_panel$int_date[data_panel$int_date<=2006])/sum(data_panel$int_date<=2006)
w
add <- int.dates[which(!int.dates %in% names(w))]
w <- c(w, setNames(rep(0, length(add)), add))
w
w <- table(data_panel$int_date[data_panel$int_date<=2007])/sum(data_panel$int_date<=2007)
w
placebo.post <- sapply(post.int, FUN = function(x){w <- table(data_panel$int_date[data_panel$int_date<=x])/sum(data_panel$int_date<=x)
add <- int.dates[which(!int.dates %in% names(w))]
w <- c(w, setNames(rep(0, length(add)), add))
w <- w[order(names(w))]})
placebo.post
colnames(placebo.post) <- post.int
rownames(placebo.post) <- gsub(rownames(placebo.post), patter="^", replacement = "int_")
placebo.post
600/(5442-sum(data_panel$int_date==2007))
1338/(5442-sum(data_panel$int_date==2007))
cbind(t(placebo.pre), placebo.post)
sort(unique(data_panel$Time[data_panel$Time>=min(int.dates)]))
post.int <- sort(unique(data_panel$Time[data_panel$Time>=min(int.dates)]))
#post.int <- post.int[-length(post.int)]
# Group-average effects at each time post-intervention: global weights post-intervention
placebo.post <- sapply(post.int, FUN = function(x){w <- table(data_panel$int_date[data_panel$int_date<=x])/sum(data_panel$int_date<=x)
add <- int.dates[which(!int.dates %in% names(w))]
w <- c(w, setNames(rep(0, length(add)), add))
w <- w[order(names(w))]})
rm(list=ls())
library(MachineControl)
set.seed(1)
data <- read.csv("C:\\Users\\fiamm\\Downloads\\cs_mlcm.csv")
#data <- read.csv("G:\\Drive condivisi\\MLCM\\replication CS 2021\\cs_mlcm.csv")
names(data)
# Organizing the dataset with as.PanelMLCM
newdata <- as.PanelMLCM(y = data[, "lemp"], timevar = data[, "year"], id = data[, "countyreal"],
int_date = data[, "firsttreat"],
x = data[, !(names(data) %in% c("lemp", "countyreal", "year", "firsttreat"))], y.lag = 1)
#lm <- list(method = "lm",  tuneGrid = expand.grid(intercept=TRUE))
#gbmGrid <-  expand.grid(interaction.depth = c(1),
# n.trees=c(500),
# shrinkage = c(0.0001),
#  n.minobsinnode = c(10))
# gbm <- list(method="gbm", tuneGrid = gbmGrid)
rf <- list(method="rf", tuneGrid = expand.grid(mtry = c(3,6,9)), ntree=1000)
lambda <- 10^seq(-1000, 1000, length = 100)
lasso <- list(method="glmnet", tuneGrid = expand.grid(alpha = 1, lambda = lambda))
pcv <- PanelCrossValidationMulti(data = newdata, ML_methods = list(lasso, rf))
fit <- MLCM(data = newdata, int_date = "int_date",
inf_type = "block", nboot = 1000, CATE = FALSE, PCV=pcv, y.lag=1)
fit <- MLCM(data = newdata, int_date = "int_date",
inf_type = "block", nboot = 1000, CATE = FALSE, PCV=pcv, y.lag=1)
int.dates
pre.int
post.int
weights
global.weights
placebo.pre
weights <- table(data$int_date)/nrow(data)
placebo.pre <- matrix(weights, length(pre.int), length(int.dates), byrow = T)
colnames(placebo.pre) <- paste0("int_", unique(data$int_date))
rownames(placebo.pre) <- pre.int
placebo.pre
weights
weights <- table(data$int_date)/nrow(data)
placebo.pre <- matrix(weights, length(pre.int), length(int.dates), byrow = T)
colnames(placebo.pre) <- paste0("int_", unique(data$int_date))
rownames(placebo.pre) <- names(weights)
weights <- table(data$int_date)/nrow(data)
placebo.pre <- matrix(weights, length(pre.int), length(int.dates), byrow = T)
colnames(placebo.pre) <- paste0("int_", names(weights))
rownames(placebo.pre) <- pre.int
placebo.weights
placebo.pre
int.dates <- sort(unique(data$int_date))
pre.int <- sort(unique(data$Time[data$Time < min(int.dates)]))
post.int <- sort(unique(data$Time[data$Time>=min(int.dates)]))
### STEP 1. Weights pre-intervention
weights <- table(data$int_date)/nrow(data)
placebo.pre <- matrix(weights, length(pre.int), length(int.dates), byrow = T)
colnames(placebo.pre) <- paste0("int_", names(weights))
rownames(placebo.pre) <- pre.int
fit <- MLCM(data = newdata, int_date = "int_date",
inf_type = "block", nboot = 1000, CATE = FALSE, PCV=pcv, y.lag=1)
global.weights
fit <- MLCM(data = newdata, int_date = "int_date",
inf_type = "block", nboot = 1000, CATE = FALSE, PCV=pcv, y.lag=1)
fit <- MLCM(data = newdata, int_date = "int_date",
inf_type = "block", nboot = 1000, CATE = FALSE, PCV=pcv, y.lag=1)
ate_i[[1]]$placebo_effects
ate_i[[1]]$ate
sapply(ate_i, FUN = function(x)(c(x$placebo_effects, x$ate)))
ate_i[[2]]$placebo_effects
ate_i[[2]]$ate
ate_i[[3]]$placebo_effects
c(pre.int, post.int)
mat <- sapply(ate_i, FUN = function(x)(c(x$placebo_effects, x$ate)))
rownames(mat) <- c(pre.int, post.int)
mat <- mat[, order(colnames(mat))]
mat
global.weights <- cbind(placebo.pre, t(placebo.post))
global.weights <- rbind(placebo.pre, t(placebo.post))
global.weights
groupavg_eff <- sapply(1:nrow(mat), FUN = function(i)(weighted.mean(mat[i,], w = global.weights[i,])))
groupavg_eff
fit <- MLCM(data = newdata, int_date = "int_date",
inf_type = "block", nboot = 1000, CATE = FALSE, PCV=pcv, y.lag=1)
global.weights
mat
View(rbind(boot_inf[[1]]$placebo_boot, boot_inf[[1]]$ate))
apply(rbind(boot_inf[[1]]$placebo_boot, boot_inf[[1]]$ate), 1, FUN = quantile, probs = c(alpha/2, 1- alpha/2))
group$time_eff
group$global.weights
prova <- sapply(boot_inf, FUN = function(x)(apply(rbind(x$placebo_boot, x$ate), 1, FUN = quantile, probs = alpha/2)))
prova
lower <- sapply(boot_inf, FUN = function(x)(apply(rbind(x$placebo_boot, x$ate), 1, FUN = quantile, probs = alpha/2)))
lower <- lower[, order(colnames(lower))]
lower
apply(1:nrow(lower), FUN = function(i)(weighted.mean(lower[i,], w = group$global.weights[i,])))
sapply(1:nrow(lower), FUN = function(i)(weighted.mean(lower[i,], w = group$global.weights[i,])))
sapply(1:nrow(upper), FUN = function(i)(weighted.mean(upper[i,], w = group$global.weights[i,])))
lower <- sapply(boot_inf, FUN = function(x)(apply(rbind(x$placebo_boot, x$ate), 1, FUN = quantile, probs = alpha/2)))
lower <- lower[, order(colnames(lower))]
group.lower <- sapply(1:nrow(lower), FUN = function(i)(weighted.mean(lower[i,], w = group$global.weights[i,])))
upper <- sapply(boot_inf, FUN = function(x)(apply(rbind(x$placebo_boot, x$ate), 1, FUN = quantile, probs = 1- alpha/2)))
upper <- upper[, order(colnames(upper))]
group.upper <- sapply(1:nrow(upper), FUN = function(i)(weighted.mean(upper[i,], w = group$global.weights[i,])))
group.lower
group.upper
group$groupavg_eff
fit <- MLCM(data = newdata, int_date = "int_date",
inf_type = "block", nboot = 1000, CATE = FALSE, PCV=pcv, y.lag=1)
fit <- MLCM(data = newdata, int_date = "int_date",
inf_type = "block", nboot = 1000, CATE = FALSE, PCV=pcv, y.lag=1)
rownames(group$groupavg_eff)
names(group$groupavg_eff)
colnames(conf.groupavg)
conf.groupavg
conf.groupavg <- rbind(group.lower, group.upper)
conf.groupavg
colnames(conf.groupavg) <- names(group$groupavg_eff)
rownames(conf.groupavg) <- c(alpha/2, 1- alpha/2)
conf.groupavg
fit <- MLCM(data = newdata, int_date = "int_date",
inf_type = "block", nboot = 1000, CATE = FALSE, PCV=pcv, y.lag=1)
fit$groupavg
fit$conf.groupavg
plot(fit$group_ate)
plot(fit$groupavg)
ylim <- c(min(fit$conf.groupavg[1,]), max(fit$conf.groupavg[2,]))
plot(fit$groupavg, ylim = ylim, pch = 16, col = "blue")
points(fit$conf.groupavg[1,], pch = 3, col = "red")
points(fit$conf.groupavg[2,], pch = 3, col = "red")
abline(h = 0, lty = "dashed", col = "black")
mean(fit$groupavg[3:6])
points(fit$global_ate, pch = 16, col = "green")
points(fit$global_ate, pch = 16, col = "white")
points(x = 3, y = fit$global_ate, pch = 16, col = "green")
points(x = 3, y = fit$conf.global.ate[1], pch = 3, col = "red")
points(x = 3, y = fit$conf.global.ate[2], pch = 3, col = "red")
#devtools::install_github("FMenchetti/MachineControl")
rm(list=ls())
library(MachineControl)
set.seed(1)
data <- read.csv("C:\\Users\\fiamm\\Downloads\\cs_mlcm.csv")
#data <- read.csv("G:\\Drive condivisi\\MLCM\\replication CS 2021\\cs_mlcm.csv")
names(data)
# Organizing the dataset with as.PanelMLCM
newdata <- as.PanelMLCM(y = data[, "lemp"], timevar = data[, "year"], id = data[, "countyreal"],
int_date = data[, "firsttreat"],
x = data[, !(names(data) %in% c("lemp", "countyreal", "year", "firsttreat"))], y.lag = 1)
#lm <- list(method = "lm",  tuneGrid = expand.grid(intercept=TRUE))
#gbmGrid <-  expand.grid(interaction.depth = c(1),
# n.trees=c(500),
# shrinkage = c(0.0001),
#  n.minobsinnode = c(10))
# gbm <- list(method="gbm", tuneGrid = gbmGrid)
rf <- list(method="rf", tuneGrid = expand.grid(mtry = c(3,6,9)), ntree=1000)
lambda <- 10^seq(-1000, 1000, length = 100)
lasso <- list(method="glmnet", tuneGrid = expand.grid(alpha = 1, lambda = lambda))
pcv <- PanelCrossValidationMulti(data = newdata, ML_methods = list(lasso, rf))
fit <- MLCM(data = newdata, int_date = "int_date",
inf_type = "block", nboot = 100, CATE = FALSE, PCV=pcv, y.lag=1)
class(fit)
fit$groupavg
df <- data.frame(x = names(fit$groupavg), y = fit$groupavg)
ggplot(df, aes(x = x, y = y))
ggplot(df, aes(x = x, y = y)) + geom_point()
View(fit$conf.groupavg)
df <- data.frame(x = names(fit$groupavg), y = fit$groupavg, lower = fit$conf.groupavg[1,],
upper = fit$conf.groupavg[2,])
ggplot(df, aes(x = x, y = y, ymin = min(lower), ymax = min(upper))) + geom_point()
ggplot(df, aes(x = x, y = y, ymin = min(lower), ymax = min(upper)))
+ geom_point(color = "blue")
ggplot(df, aes(x = x, y = y, ymin = min(lower), ymax = min(upper)))
+ geom_point(colour = "blue")
ggplot(df, aes(x = x, y = y, ymin = min(lower), ymax = min(upper))) +
geom_point(colour = "blue")
ggplot(df, aes(x = x, y = y, ymin = min(lower), ymax = max(upper))) +
geom_point(colour = "deepskyblue") +
labs(title = "Group-average effects over time", ylab = "", xlab = "")
ggplot(df, aes(x = x, y = y, ymin = min(lower), ymax = max(upper)))
ggplot(df, aes(x = x, y = y, ymin = min(lower), ymax = max(upper), xlab = ""))
ggplot(df, aes(x = x, y = y, ymin = min(lower), ymax = max(upper))) +  geom_point(size = 1.5, colour = "deepskyblue")
ggplot(df, aes(x = x, y = y, ymin = min(lower), ymax = max(upper))) +
geom_point(size = 1.5, colour = "deepskyblue") +
labs(title = "Group-average effects over time") + xlab("") + ylab = ("")
ggplot(df, aes(x = x, y = y, ymin = min(lower), ymax = max(upper))) +
geom_point(size = 1.5, colour = "deepskyblue") +
labs(title = "Group-average effects over time") + xlab("") + ylab = ("")
ggplot(df, aes(x = x, y = y, ymin = min(lower), ymax = max(upper))) +
geom_point(size = 1.5, colour = "deepskyblue") +
labs(title = "Group-average effects over time")
ggplot(df, aes(x = x, y = y, ymin = min(lower), ymax = max(upper))) +
geom_point(size = 1.5, colour = "deepskyblue") +
labs(title = "Group-average effects over time") +
xlab("") + ylab("")
ggplot(df, aes(x = x, y = y, ymin = min(lower), ymax = max(upper))) +
geom_point(size = 1.5, colour = "deepskyblue") +
labs(title = "Group-average effects over time") +
xlab("") + ylab("") + geom_errorbar()
ggplot(df, aes(x = x, y = y, ymin = min(lower), ymax = max(upper))) +
geom_point(size = 1.5, colour = "deepskyblue") +
labs(title = "Group-average effects over time") +
xlab("") + ylab("") + geom_errorbar(height = upper - lower)
ggplot(df, aes(x = x, y = y, ymin = min(lower), ymax = max(upper))) +
geom_point(size = 1.5, colour = "deepskyblue") +
labs(title = "Group-average effects over time") +
xlab("") + ylab("") + geom_errorbar(ymin = lower, ymax = upper)
ggplot(df, aes(x = x, y = y, ymin = min(lower), ymax = max(upper))) +
geom_point(size = 1.5, colour = "deepskyblue") +
labs(title = "Group-average effects over time") +
xlab("") + ylab("") + geom_errorbar(aes(ymin = lower, ymax = upper))
ggplot(df, aes(x = x, y = y, ymin = min(lower), ymax = max(upper))) +
geom_point(size = 1.5, colour = "deepskyblue") +
labs(title = "Group-average effects over time") +
xlab("") + ylab("") + geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2)
ggplot(df, aes(x = x, y = y, ymin = min(lower), ymax = max(upper))) +
geom_point(size = 1.5, colour = "deepskyblue") +
labs(title = "Group-average effects over time") +
xlab("") + ylab("") + geom_errorbar(aes(ymin = lower, ymax = upper), colour = "deepskyblue")
ggplot(df, aes(x = x, y = y, ymin = min(lower), ymax = max(upper))) +
geom_point(size = 1.5, colour = "deepskyblue") +
labs(title = "Group-average effects over time") +
xlab("") + ylab("") + geom_errorbar(aes(ymin = lower, ymax = upper), colour = "deepskyblue", width = 0.2) +
geom_point(data = df[df$x<2004,], color = "red")
df <- data.frame(x = names(fit$groupavg), y = fit$groupavg, lower = fit$conf.groupavg[1,],
upper = fit$conf.groupavg[2,])
df$col <- ifelse(df$x < 2004, "brown1","deepskyblue")
df
ggplot(df, aes(x = x, y = y, ymin = min(lower), ymax = max(upper))) +
geom_point(size = 1.5, aes(colour = col)) +
labs(title = "Group-average effects over time")
ggplot(df, aes(x = x, y = y, ymin = min(lower), ymax = max(upper))) +
geom_point(size = 2, aes(colour = col)) +
labs(title = "Group-average effects over time") +
xlab("") + ylab("") + geom_errorbar(aes(ymin = lower, ymax = upper, colour = col), width = 0.2)
ggplot(df, aes(x = x, y = y, ymin = min(lower), ymax = max(upper))) +
geom_point(size = 2, aes(colour = col)) +
labs(title = "Group-average effects over time") +
xlab("") + ylab("") + geom_errorbar(aes(ymin = lower, ymax = upper, colour = col), width = 0.2) +
geom_line(h = 0)
ggplot(df, aes(x = x, y = y, ymin = min(lower), ymax = max(upper))) +
geom_point(size = 2, aes(colour = col)) +
labs(title = "Group-average effects over time") +
xlab("") + ylab("") + geom_errorbar(aes(ymin = lower, ymax = upper, colour = col), width = 0.2) +
geom_hline(yintercept = 0)
ggplot(df, aes(x = x, y = y, ymin = min(lower), ymax = max(upper))) +
geom_point(size = 2, aes(colour = col)) +
labs(title = "Group-average effects over time") +
xlab("") + ylab("") + geom_errorbar(aes(ymin = lower, ymax = upper, colour = col), width = 0.2) +
geom_hline(yintercept = 0, linetype = "dashed")
ggplot(df, aes(x = x, y = y, ymin = min(lower), ymax = max(upper))) +
geom_point(size = 2, aes(colour = col)) +
labs(title = "Group-average effects over time") +
xlab("") + ylab("") + geom_errorbar(aes(ymin = lower, ymax = upper, colour = col), width = 0.2) +
geom_hline(yintercept = 0, linetype = "dashed", colour = "grey")
g <- ggplot(df, aes(x = x, y = y, ymin = min(lower), ymax = max(upper))) +
geom_point(size = 2, aes(colour = col)) +
labs(title = "Group-average effects over time") +
xlab("") + ylab("") + geom_errorbar(aes(ymin = lower, ymax = upper, colour = col), width = 0.2) +
geom_hline(yintercept = 0, linetype = "dashed", colour = "grey")
g + theme_bw()
g + theme_bw() + labs(colour = "prova")
g + theme_bw() + labs(colour = " ")
plot.CausalMLCM <- function(x){
# Step 1. Creating a dataframe
df <- data.frame(times = names(x$groupavg), y = x$groupavg, lower = x$conf.groupavg[1,],
upper = x$conf.groupavg[2,])
df$col <- ifelse(df$times < 2004, "Pre-int","Post-int")
# Step 2. Ggplotting
g <- ggplot(df, aes(x = times, y = y, ymin = min(lower), ymax = max(upper))) +
geom_point(size = 2, aes(colour = col)) +
geom_errorbar(aes(ymin = lower, ymax = upper, colour = col), width = 0.2) +
geom_hline(yintercept = 0, linetype = "dashed", colour = "grey") +
labs(title = "Group-average effects over time", colour = " ") + xlab("") + ylab("") +
scale_color_manual(values = c("Pre-int" = "brown1", "Post-int" = "deepskyblue"))
# Step 3. Returning results
return(g)
}
plot(fit)
plot(fit) + theme_bw()
plot(fit)
int_year_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_year <- rep(int_year_i, each = length(unique(data$year)))
int_year_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_year <- rep(int_year_i, each = length(unique(data$year)))
# Define data_stag
data_stag <- data.frame(int_year, data)
# Estimation
fit <- StagMLCM(data = data_stag, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "block", nboot = 10, y.lag = 2)
lapply(ate_i, function(x)(c(x$placebo_effects, x$ate)))
boot_inf[[1]]$conf.placebo
lapply(1:length(nint), function(i)(list(estimate = c(ate_i[[i]]$placebo_effects, ate_i[[i]]$ate),
conf.interval = cbind(boot_inf[[i]]$conf.placebo, boot_inf[[i]]$conf.ate))))
cohort_eff <- lapply(1:length(nint), function(i)(list(estimate = c(ate_i[[i]]$placebo_effects, ate_i[[i]]$ate),
conf.interval = cbind(boot_inf[[i]]$conf.placebo, boot_inf[[i]]$conf.ate))))
names(cohort_eff) <- names(boot_inf)
cohort_eff$int_2019
ate_i$int_2019$placebo_effects
dim(boot_inf$int_2019$placebo_boot)
dim(boot_inf$int_2019$ate_boot)
View(boot_inf$int_2019$placebo_boot)
View(boot_inf$int_2019$ate_boot)
int_year_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_year <- rep(int_year_i, each = length(unique(data$year)))
# Define data_stag
data_stag <- data.frame(int_year, data)
# Estimation
fit <- StagMLCM(data = data_stag, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "block", nboot = 10, y.lag = 2)
plot(fit, type = "global")
plot(fit, type = "time")
fit$int_date
plot(fit, type = "cohort")
prova<-plot(fit, type = "cohort")
prova$int_2019
prova$int_2020
prova<-plot(fit, type = "cohort")
prova<-plot(fit, type = "time")
prova
prova + theme_bw()
prova<-plot(fit, type = "global")
prova
plot(fit, type = "time")
fit$int_date
list(fit$int_date)
as.list(fit$int_date)
prova<-plot(fit, type = "cohort")
prova<-plot(fit, type = "cohort")
mapply(X = x$group_ate, Y = as.list(x$int_date),
FUN = function(X,Y)(.plot_effects(x = X, int.date = Y)),
SIMPLIFY = FALSE)
mapply(X = x$group_ate, Y = as.list(x$int_date),
FUN = function(X,Y)(.plot_effects(x = X, int_date = Y)),
SIMPLIFY = FALSE)
.plot_effects(x$group_ate$int_2019, int_date = 2019)
.plot_effects(x$group_ate$int_2020, int_date = 2020)
prova<-plot(fit, type = "cohort")
.plot_effects(x = fit$group_ate$int_2020, int_date = 2020)
df
fit$group_ate$int_2019
names(fit$group_ate$int_2019$estimate)
names(x$estimate)
fit$group_ate$int_2019$estimate
fit$group_ate$int_2020$estimate
int_year_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_year <- rep(int_year_i, each = length(unique(data$year)))
# Define data_stag
data_stag <- data.frame(int_year, data)
# Estimation
fit <- StagMLCM(data = data_stag, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "block", nboot = 10, y.lag = 2)
int_year_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_year <- rep(int_year_i, each = length(unique(data$year)))
# Define data_stag
data_stag <- data.frame(int_year, data)
# Estimation
fit <- StagMLCM(data = data_stag, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "block", nboot = 10, y.lag = 2)
View(ind_effects)
View(ind_effects)
colMeans(as.matrix(ind_effects[, -1]))
colnames(ind_effects[,-1])
colnames(ind_effects)
colnames(ind_effects)[-1]
prova<-plot(fit, type = "cohort")
.plot_effects(x$group_ate, int_date = 2019)
.plot_effects(x$group_ate, int_date = 2020)
df
fit$group_ate$int_2019$estimate
fit$group_ate$int_2019$conf.interval
fit$group_ate$int_2020$estimate
int_year_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_year <- rep(int_year_i, each = length(unique(data$year)))
# Define data_stag
data_stag <- data.frame(int_year, data)
# Estimation
fit <- StagMLCM(data = data_stag, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "block", nboot = 10, y.lag = 2)
plot(fit, type = "cohort")
.plot_effects(x$group_ate, int_date = 2019)
.plot_effects(x$group_ate, int_date = 2019)
df
x$int_2019$estimate
.plot_effects(x$int_2019 , int_date = 2019)
.plot_effects(x$int_2020 , int_date = 2020)
df
prova <- plot(fit, type = "cohort")
prova[[1]]
prova[[2]]
plot(fit, type = "cohort")
plot(fit, type = c("global", "time"))
plot(fit, type = c("global", "time"))
plot(fit, type = c("global"))
plot(fit, type = c("global"))
plot(fit, type = c("global")
)
plot(fit, type = c("global", "time"))
plot(fit, type = c("global"))
prova <- plot(fit, type = c("global"))
prova
prova + ggtitle("prova")
prova <- plot(fit, type = "global")
prova$global + ggtitle("prova")
plot(fit, type = "global")
plot(fit, type = "time")
plot(fit, type = "cohort")
plot(fit, type = "time")
plot(fit, type = "global")
plot(fit, type = "global")
install.packages("testthat")
usethis::use_testthat(3)
