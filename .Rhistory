impact <- c(2,1.5)            # Fictional additive effect (it can be fixed or vary)
# impact <- 2
impact_constant <- FALSE        # Set to FALSE for additive impact proportional to std.dev.
### Parallel settings
niter <- 1                      # Number of iterations for each t in Tt
### Checks
if(length(impact) != post_per + 1) stop("Impact must have length post_per + 1")
###########################################################
## Simulations
###########################################################
t <- Tt[1]
### Generating continuous covariates, varying across units
set.seed(6723)
x1 <- seq(0.2, by = 0.1, length.out = t) + rnorm(t, 0, 1)
xm <- mvrnorm(n = t, mu = c(1,2,3), Sigma = matrix(c(1,0.5,0.7,0.5, 1, 0.3, 0.7, 0.3, 1), nrow = 3, ncol = 3))
X <- cbind(x1 = x1, x2 = xm[,1], x3 = xm[,2], x4 = xm[,3])
ran <- lapply(1:N, FUN = mvrnorm, n = NROW(X) , mu = rep(1, ncol(X)), Sigma = 0.1*diag(1, nrow = ncol(X), ncol = ncol(X)))
X <- lapply(ran, function(x){y <- x + X; colnames(y) <- colnames(X); y})
### Generating categorical covariates, varying across units
x5 <- lapply(1:N, FUN = function(x)(sample(0:1, t, replace = TRUE)))
x6 <- lapply(1:N, FUN = function(x)(sample(1:3, t, replace = TRUE)))
### Binding and adding interactions
X <- mapply(X, x5, x6, FUN = function(X, x5, x6)(cbind(X, x5, x6, x7 = X[,3]*x6, x8 = X[,2]*x5)), SIMPLIFY = F)
###########################################################
## Single dataset generation
###########################################################
data <- sim_ardl(seed = x*setseed, beta = beta, X = X, N = N, sigma = sigma,
ar1_coef = rho, impact = impact, impact_constant = impact_constant,
ylag = FALSE, linear = linear, post_per = post_per)
data <- sim_ardl(seed = 1, beta = beta, X = X, N = N, sigma = sigma,
ar1_coef = rho, impact = impact, impact_constant = impact_constant,
ylag = FALSE, linear = linear, post_per = post_per)
View(data$dat)
usethis::use_data(data, overwrite = TRUE)
library(MachineControl)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2020,
inf_type = "classic", nboot = 10, CATE = FALSE, y.lag = 2)
library(MachineControl)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2020,
inf_type = "classic", nboot = 10, y.lag = 2)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2020,
inf_type = "classic", nboot = 10, y.lag = 2)
class(data)
################################################################################
##
## Simulation study
##
## Authors:      Cerqua A., Letta M., Menchetti F.
## Last update:  Feb 2023
##
################################################################################
## Cleaning and setting directory
rm(list = ls())
set.seed(6723)
#wd <- "C:/Users/fiamm/Documents/MLCM"
################################################################################
## Libraries and Functions
################################################################################
## Cleaning and setting directory
rm(list = ls())
set.seed(6723)
library(CAST)
library(caret)
library(gbm)
library(elasticnet)
library(parallel)
library(MASS)
library(bcaboot)
library(pls)
library(stats)
library(utils)
library(randomForest)
library(rpart)
library(abind)
source("~/MLCM/Codes/Sim_Functions.R")
source("~/MLCM/Codes/package.R")
################################################################################
## Settings
################################################################################
# Parameters
# Tt <- c(6, 11, 21)              # Times (PRE + POST)
Tt <- c(8, 13, 23)
post_per <- 1                   # Number of post-intervention periods (excluding int_date)
# NB. int_date is by default included in the post-int period,
# so for a single post intervention, set post_per <- 0
N <- 80                        # Number of units in the panel
beta <- c(0, 1, 2.5, 0.1,
0, 0, 2, 1.5)     # Coefficient of Xt-1
rho <- 0.8                     # Coefficient of Yt-1
sigma <- 2                      # St.dev of the error term
### Linear or non linear model?
linear <- TRUE                  # set to 'FALSE' for non-linear specification
### Impact settings
impact <- c(2,1.5)            # Fictional additive effect (it can be fixed or vary)
# impact <- 2
impact_constant <- FALSE        # Set to FALSE for additive impact proportional to std.dev.
### Parallel settings
niter <- 1                      # Number of iterations for each t in Tt
### Checks
if(length(impact) != post_per + 1) stop("Impact must have length post_per + 1")
###########################################################
## Simulations
###########################################################
t <- Tt[1]
### Generating continuous covariates, varying across units
set.seed(6723)
x1 <- seq(0.2, by = 0.1, length.out = t) + rnorm(t, 0, 1)
xm <- mvrnorm(n = t, mu = c(1,2,3), Sigma = matrix(c(1,0.5,0.7,0.5, 1, 0.3, 0.7, 0.3, 1), nrow = 3, ncol = 3))
X <- cbind(x1 = x1, x2 = xm[,1], x3 = xm[,2], x4 = xm[,3])
ran <- lapply(1:N, FUN = mvrnorm, n = NROW(X) , mu = rep(1, ncol(X)), Sigma = 0.1*diag(1, nrow = ncol(X), ncol = ncol(X)))
X <- lapply(ran, function(x){y <- x + X; colnames(y) <- colnames(X); y})
### Generating categorical covariates, varying across units
x5 <- lapply(1:N, FUN = function(x)(sample(0:1, t, replace = TRUE)))
x6 <- lapply(1:N, FUN = function(x)(sample(1:3, t, replace = TRUE)))
### Binding and adding interactions
X <- mapply(X, x5, x6, FUN = function(X, x5, x6)(cbind(X, x5, x6, x7 = X[,3]*x6, x8 = X[,2]*x5)), SIMPLIFY = F)
###########################################################
## Single dataset generation
###########################################################
data <- sim_ardl(seed = 1, beta = beta, X = X, N = N, sigma = sigma,
ar1_coef = rho, impact = impact, impact_constant = impact_constant,
ylag = FALSE, linear = linear, post_per = post_per)
data <- data$dat
usethis::use_data(data, overwrite = TRUE)
library(MachineControl)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2020,
inf_type = "classic", nboot = 10, y.lag = 2, CATE = FALSE)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2020,
inf_type = "classic", nboot = 10, y.lag = 2)
library(MachineControl)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2020,
inf_type = "classic", nboot = 10, y.lag = 2)
library(MachineControl)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2020,
inf_type = "classic", nboot = 10, CATE = TRUE)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2020,
inf_type = "classic", nboot = 10, y.lag = 2)
warnings()
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, y.lag = 2)
warnings()
length(unique(postimes))
View(data)
View(data)
data[(post + i), paste0("Ylag",i)] <- pred - error
View(data)
library(MachineControl)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, y.lag = 2)
View(data)
View(data)
library(MachineControl)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2020,
inf_type = "classic", nboot = 10, y.lag = 2)
View(data)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, y.lag = 2)
View(data)
## Cleaning and setting directory
rm(list = ls())
set.seed(6723)
#wd <- "C:/Users/fiamm/Documents/MLCM"
################################################################################
## Libraries and Functions
################################################################################
library(CAST)
library(caret)
library(gbm)
library(elasticnet)
library(parallel)
library(MASS)
library(bcaboot)
library(pls)
library(stats)
library(utils)
library(randomForest)
library(rpart)
library(abind)
source("~/MLCM/Codes/Sim_Functions.R")
source("~/MLCM/Codes/package.R")
################################################################################
## Settings
################################################################################
# Parameters
# Tt <- c(6, 11, 21)              # Times (PRE + POST)
Tt <- c(8, 13, 23)
post_per <- 1                   # Number of post-intervention periods (excluding int_date)
# NB. int_date is by default included in the post-int period,
# so for a single post intervention, set post_per <- 0
N <- 100                        # Number of units in the panel
beta <- c(0, 1, 2.5, 0.1,
0, 0, 2, 1.5)     # Coefficient of Xt-1
rho <- 0.8                     # Coefficient of Yt-1
sigma <- 2                      # St.dev of the error term
### Linear or non linear model?
linear <- TRUE                  # set to 'FALSE' for non-linear specification
### Impact settings
impact <- c(2,1.5)            # Fictional additive effect (it can be fixed or vary)
# impact <- 2
impact_constant <- FALSE        # Set to FALSE for additive impact proportional to std.dev.
### Parallel settings
niter <- 1                      # Number of iterations for each t in Tt
### Checks
if(length(impact) != post_per + 1) stop("Impact must have length post_per + 1")
###########################################################
## Simulations
###########################################################
t <- Tt[1]
### Generating continuous covariates, varying across units
set.seed(6723)
x1 <- seq(0.2, by = 0.1, length.out = t) + rnorm(t, 0, 1)
xm <- mvrnorm(n = t, mu = c(1,2,3), Sigma = matrix(c(1,0.5,0.7,0.5, 1, 0.3, 0.7, 0.3, 1), nrow = 3, ncol = 3))
X <- cbind(x1 = x1, x2 = xm[,1], x3 = xm[,2], x4 = xm[,3])
ran <- lapply(1:N, FUN = mvrnorm, n = NROW(X) , mu = rep(1, ncol(X)), Sigma = 0.1*diag(1, nrow = ncol(X), ncol = ncol(X)))
X <- lapply(ran, function(x){y <- x + X; colnames(y) <- colnames(X); y})
### Generating categorical covariates, varying across units
x5 <- lapply(1:N, FUN = function(x)(sample(0:1, t, replace = TRUE)))
x6 <- lapply(1:N, FUN = function(x)(sample(1:3, t, replace = TRUE)))
### Binding and adding interactions
X <- mapply(X, x5, x6, FUN = function(X, x5, x6)(cbind(X, x5, x6, x7 = X[,3]*x6, x8 = X[,2]*x5)), SIMPLIFY = F)
###########################################################
## Single dataset generation
###########################################################
data <- sim_ardl(seed = 1, beta = beta, X = X, N = N, sigma = sigma,
ar1_coef = rho, impact = impact, impact_constant = impact_constant,
ylag = FALSE, linear = linear, post_per = post_per)
data <- data$dat
View(data)
ind <- which(is.na(data$Xlag1.x1))
data <- data[-ind,]
View(data)
usethis::use_data(data, overwrite = TRUE)
library(MachineControl)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2020,
inf_type = "classic", nboot = 10, y.lag = 1)
library(MachineControl)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2020,
inf_type = "classic", nboot = 10, CATE = TRUE)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2020,
inf_type = "classic", nboot = 10, y.lag = 1)
library(MachineControl)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2020,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 1)
fit$ate
c(fit$ate.lower, fit$ate.upper)
fit$conf.ate
library(MachineControl)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2020,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 1)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 1)
View(data)
library(MachineControl)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = T)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 1)
fit$ate
fit$conf.ate
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2)
fit$ate
fit$conf.ate
fit$cate.inf
source("~/MLCM/Codes/sim_code_local.R", echo=TRUE)
tab
newdata <- as.PanelMLCM(y = data[, "Y"], timevar = data[, "year"], id = data[, "ID"],
x = data[, !(names(data) %in% c("Y", "ID", "year"))], y.lag = 2)
head(newdata)
newdata <- as.PanelMLCM(y = data[, "Y"], timevar = data[, "year"], id = data[, "ID"],
x = data[, !(names(data) %in% c("Y", "ID", "year"))], y.lag = 2)
newdata <- as.PanelMLCM(y = data[, "Y"], timevar = data[, "year"], id = data[, "ID"],
x = data[, !(names(data) %in% c("Y", "ID", "year"))], y.lag = 1)
head(newdata)
indices <- CAST::CreateSpacetimeFolds(newdata, timevar = "Time", k = length(unique(data$year)))
indices <- CAST::CreateSpacetimeFolds(newdata, timevar = "Time", k = length(unique(newdata$year)))
indices <- CAST::CreateSpacetimeFolds(newdata, timevar = "Time", k = length(unique(newdata$Time)))
trainx <- indices$indexOut[1:2]
testx <- indices$indexOut[3:4]
ctrl <- trainControl(index = trainx, indexOut = testx)
pcv <- PanelCrossValidation(data = newdata, int_date = 2019, trControl = ctrl)
library(MachineControl)
library(MachineControl)
library(MachineControl)
library(MachineControl)
library(MachineControl)
rf <- list(method = "rf", tuneGrid = c(1,2,3), ntree = 10)
rf
names(x) %in% c("method", "tuneGrid")
names(rf) %in% c("method", "tuneGrid")
any(!names(rf) %in% c("method", "tuneGrid"))
c("method", "tuneGrid") %in% names(rf)
!c("method", "tuneGrid") %in% names(rf)
!all(c("method", "tuneGrid") %in% names(rf))
lasso <- list(method = "lasso")
ML_methods <- list(rf, lasso)
any(sapply(ML_methods, FUN = function(x)(!all(c("method", "tuneGrid") %in% names(x)))))
sapply(ML_methods, FUN = function(x)(!all(c("method", "tuneGrid") %in% names(x))))
library(MachineControl)
library(MachineControl)
library(MachineControl)
dim(data)
View(data)
length(unique(data$ID))
x.cate <- cbind(ID = unique(data$ID), x1 = rnorm(100), x2 = 2*rnorm(100), x3 = 3*rnorm(100))
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
library(MachineControl)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
all.equal(data[, id] , x.cate[, id])
all.equal(unique(data[, id]) , x.cate[, id])
library(MachineControl)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
library(MachineControl)
View(effects$ind_effects)
library(MachineControl)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
View(ind_effects)
class(ind_effects)
dim(ind_effects)
length(unique(data$ID))
View(data)
library(MachineControl)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
View(data)
View(data)
View(data)
library(MachineControl)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
View(data)
library(MachineControl)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
View(data_cate)
prova <- merge(data_cate, x.cate, by = "ID")
View(prova)
library(MachineControl)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
View(data_cate)
View(mat)
library(MachineControl)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
fit$ate
fit$conf.ate
fit$cate
fit$cate.inf
library(MachineControl)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
fit$ate
fit$conf.ate
x.cate <- cbind(ID = rep(1:100, each = 2), year = rep(2019:2020, each = 100), x1 = rnorm(200), x2 = 2*rnorm(200))
View(x.cate)
x.cate <- cbind(ID = rep(1:100, each = 2), year = rep(2019:2020, times = 100), x1 = rnorm(200), x2 = 2*rnorm(200))
sample(1:5, size = 10)
sample(1:5, size = 10, replace = T)
library(MachineControl)
x.cate <- cbind(ID = rep(1:100, each = 2), year = rep(2019:2020, times = 100), x1 = rnorm(200),
x2 = 2*rnorm(200), x3 = sample(1:5, size = 200, replace = TRUE))
View(x.cate)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
View(data_cate)
View(data_cate)
View(x.cate)
data_cate <- data.frame(Time = postimes, ID = data[post, "ID"], effect = c(t(ind_effects[,-1])))
View(data_cate)
prova_cate <- merge(data_cate, x.cate)
View(prova_cate)
colnames(x.cate)
colnames(x.cate)[2] <- "Time"
colnames(data_cate)
colnames(x.cate)
prova_cate <- merge(data_cate, x.cate)
View(prova_cate)
prova_cate <- merge(data_cate, x.cate, by = c("ID", "Time"))
View(prova_cate)
View(data.frame(Time = postimes, ID = data[post, "ID"], effect = c(t(ind_effects[,-1]))))
library(MachineControl)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
library(MachineControl)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
View(x.cate)
library(MachineControl)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
colnames(x.cate)
colnames(x.cate)
colnames(x.cate)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
library(MachineControl)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
View(data_cate)
View(data_cate)
View(data_cate)
View(data_cate[data_cate$Time == 2019,])
View(mat)
library(MachineControl)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
class(cate)
class(cate.inf)
class(cate[[1]])
class(cate.inf[[1]])
cate.inf[[1]]
library(MachineControl)
library(MachineControl)
library(MachineControl)
library(MachineControl)
install.packages("caret")
install.packages("CAST")
3.99*24
install.packages("pls")
install.packages("elasticnet")
install.packages("gbm")
install.packages("randomForest")
install.packages("bcaboot")
head(data)
newdata <- as.PanelMLCM(y = data[, "Y"], timevar = data[, "year"], id = data[, "ID"],
x = data[, !(names(data) %in% c("Y", "ID", "year"))], y.lag = 2)
# Results
head(newdata)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019, nboot = 10, y.lag = 2)
sessionInfo()
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, y.lag = 2)
fit$ate
fit$conf.ate
fit$ind.effects
fit$conf.individual
wd <- "H:/Il mio Drive/TESI/Martina"
setwd(wd)
### Data, libraries, functions
data <- read.csv("archivio_2024_pre_imputazione_aggiornato.csv", header = T, sep = ";")
# how many n.d.?
sum(data == "n.d.", na.rm = T)
prova <- mapply(data, FUN = function(x){
ind <- which(x == "n.d.")
x[ind] <- 999999999
}, SIMPLIFY = T)
prova <- lapply(data, FUN = function(x){
ind <- which(x == "n.d.")
x[ind] <- 999999999
})
class(prova[[1]])
length(prova[[1]])
prova[[1]]
prova <- lapply(1:ncol(data), FUN = function(i){
ind <- which(data[,i] == "n.d.")
data[ind,i] <- 999999999
})
length(prova[[1]])
prova[[1]]
prova[[81]]
which(data[,1] == "n.d.")
ind <- which(data[,81] == "n.d.")
data[ind,i] <- 999999999
data[ind,81] <- 999999999
which(data[,81] == "n.d.")
for(i in 1:ncol(data)){
ind <- which(data[,i] == "n.d.")
data[ind, i] <- 999999999
}
sum(data == "n.d.", na.rm = T)
sum(data == 999999999, na.rm = T)
class(data[,81])
rm(list = ls())
setwd("H:/Il mio Drive/IRPET")
### Data, libraries, functions
data <- read.csv("archivio_2024_pre_imputazione_aggiornato.csv", header = T, sep = ";")
# how many n.d.?
nnd <- sum(data == "n.d.", na.rm = T)
# assign 999999999 label to n.d.
for(i in 1:ncol(data)){
ind <- which(data[,i] == "n.d.")
data[ind, i] <- 999999999
}
# check
if(sum(data == 999999999, na.rm = T) == nnd){
print("check OK")} else {
stop("Il numero di nuovi labels è diverso")
}
# Functions
source("Generic_Fun.R")
cl <- check_class(data)
cl$numeric
cl$character
nas <- check_NA(data)
nas$na
nas$na.pp #
nas$na.summary
