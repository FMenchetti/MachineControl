linreg <- list(method = "lm",
tuneGrid = expand.grid(
intercept = seq(0, 10, by = 0.5)))
pls <- list(method = "pls",
tuneGrid = expand.grid(ncomp = c(1:5)))
pcv <- PanelCrossValidation(data = newdata, int_date = 2019, trControl = ctrl,
ML_methods = list(enet, linreg, pls))
causal <- MLCM(data = newdata, int_date = 2019, inf_type = "classic", PCV = pcv,
nboot = 1000, CATE = FALSE, y.lag = 2)
causal$ate$estimate
causal$ate$conf.interval
new <- Sys.time()
new - old
old <- Sys.time()
### Example 2. Changing ML methods and estimating ATE
enet <- list(method = "enet",
tuneGrid = expand.grid(
fraction = seq(0.1, 0.9, by = 0.1),
lambda = seq(0.1, 0.9, by = 0.1)))
linreg <- list(method = "lm",
tuneGrid = expand.grid(
intercept = seq(0, 10, by = 0.5)))
pls <- list(method = "pls",
tuneGrid = expand.grid(ncomp = c(1:5)))
pcv <- PanelCrossValidation(data = newdata, int_date = 2019, trControl = ctrl,
ML_methods = list(enet, linreg, pls))
causal <- MLCM(data = newdata, int_date = 2019, inf_type = "classic", PCV = pcv,
nboot = 2000, CATE = FALSE, y.lag = 2)
causal$ate$estimate
causal$ate$conf.interval
new <- Sys.time()
new - old
View(data)
old <- Sys.time()
### Example 2. Changing ML methods and estimating ATE
enet <- list(method = "enet",
tuneGrid = expand.grid(
fraction = seq(0.1, 0.9, by = 0.1),
lambda = seq(0.1, 0.9, by = 0.1)))
linreg <- list(method = "lm",
tuneGrid = expand.grid(
intercept = seq(0, 10, by = 0.5)))
pls <- list(method = "pls",
tuneGrid = expand.grid(ncomp = c(1:5)))
pcv <- PanelCrossValidation(data = newdata, int_date = 2019, trControl = ctrl,
ML_methods = list(enet, linreg, pls))
causal <- MLCM(data = newdata, int_date = 2019, inf_type = "classic", PCV = pcv,
nboot = 100, CATE = FALSE, y.lag = 2, pcv_block = 1)
causal$ate$estimate
causal$ate$conf.interval
new <- Sys.time()
new - old
old <- Sys.time()
### Example 2. Changing ML methods and estimating ATE
enet <- list(method = "enet",
tuneGrid = expand.grid(
fraction = seq(0.1, 0.9, by = 0.1),
lambda = seq(0.1, 0.9, by = 0.1)))
linreg <- list(method = "lm",
tuneGrid = expand.grid(
intercept = seq(0, 10, by = 0.5)))
pls <- list(method = "pls",
tuneGrid = expand.grid(ncomp = c(1:5)))
pcv <- PanelCrossValidation(data = newdata, int_date = 2019, trControl = ctrl,
ML_methods = list(enet, linreg, pls))
causal <- MLCM(data = newdata, int_date = 2019, inf_type = "classic", PCV = pcv,
nboot = 10, CATE = FALSE, y.lag = 2, pcv_block = 1)
causal$ate$estimate
causal$ate$conf.interval
new <- Sys.time()
new - old
plot(causal)
plot(causal, type = "ate")
old <- Sys.time()
### Example 2. Changing ML methods and estimating ATE
enet <- list(method = "enet",
tuneGrid = expand.grid(
fraction = seq(0.1, 0.9, by = 0.1),
lambda = seq(0.1, 0.9, by = 0.1)))
linreg <- list(method = "lm",
tuneGrid = expand.grid(
intercept = seq(0, 10, by = 0.5)))
pls <- list(method = "pls",
tuneGrid = expand.grid(ncomp = c(1:5)))
pcv <- PanelCrossValidation(data = newdata, int_date = 2019, trControl = ctrl,
ML_methods = list(enet, linreg))
causal <- MLCM(data = newdata, int_date = 2019, inf_type = "classic", PCV = pcv,
nboot = 10, CATE = FALSE, y.lag = 2)
causal$ate$estimate
causal$ate$conf.interval
new <- Sys.time()
new - old
old <- Sys.time()
### Example 2. Changing ML methods and estimating ATE
enet <- list(method = "enet",
tuneGrid = expand.grid(
fraction = seq(0.1, 0.9, by = 0.1),
lambda = seq(0.1, 0.9, by = 0.1)))
linreg <- list(method = "lm",
tuneGrid = expand.grid(
intercept = seq(0, 10, by = 0.5)))
pls <- list(method = "pls",
tuneGrid = expand.grid(ncomp = c(1:5)))
pcv <- PanelCrossValidation(data = newdata, int_date = 2019, trControl = ctrl,
ML_methods = list(enet, linreg))
causal <- MLCM(data = newdata, int_date = 2019, inf_type = "classic", PCV = pcv,
nboot = 100, CATE = FALSE, y.lag = 2)
causal$ate$estimate
causal$ate$conf.interval
new <- Sys.time()
new - old
old <- Sys.time()
### Example 2. Changing ML methods and estimating ATE
enet <- list(method = "enet",
tuneGrid = expand.grid(
fraction = seq(0.1, 0.9, by = 0.1),
lambda = seq(0.1, 0.9, by = 0.1)))
linreg <- list(method = "lm",
tuneGrid = expand.grid(
intercept = seq(0, 10, by = 0.5)))
pls <- list(method = "pls",
tuneGrid = expand.grid(ncomp = c(1:5)))
pcv <- PanelCrossValidation(data = newdata, int_date = 2019, trControl = ctrl,
ML_methods = list(enet, linreg))
causal <- MLCM(data = newdata, int_date = 2019, inf_type = "classic", PCV = pcv,
nboot = 10, CATE = FALSE, y.lag = 2, pcv_block = 1)
causal$ate$estimate
causal$ate$conf.interval
new <- Sys.time()
new - old
old <- Sys.time()
### Example 2. Changing ML methods and estimating ATE
enet <- list(method = "enet",
tuneGrid = expand.grid(
fraction = seq(0.1, 0.9, by = 0.1),
lambda = seq(0.1, 0.9, by = 0.1)))
linreg <- list(method = "lm",
tuneGrid = expand.grid(
intercept = seq(0, 10, by = 0.5)))
pls <- list(method = "pls",
tuneGrid = expand.grid(ncomp = c(1:5)))
pcv <- PanelCrossValidation(data = newdata, int_date = 2019, trControl = ctrl,
ML_methods = list(enet, linreg))
causal <- MLCM(data = newdata, int_date = 2019, inf_type = "classic", PCV = pcv,
nboot = 10, CATE = FALSE, y.lag = 2, alpha = 0.02)
causal$ate$estimate
causal$ate$conf.interval
new <- Sys.time()
new - old
old <- Sys.time()
### Example 2. Changing ML methods and estimating ATE
enet <- list(method = "enet",
tuneGrid = expand.grid(
fraction = seq(0.1, 0.9, by = 0.1),
lambda = seq(0.1, 0.9, by = 0.1)))
linreg <- list(method = "lm",
tuneGrid = expand.grid(
intercept = seq(0, 10, by = 0.5)))
pls <- list(method = "pls",
tuneGrid = expand.grid(ncomp = c(1:5)))
pcv <- PanelCrossValidation(data = newdata, int_date = 2019, trControl = ctrl,
ML_methods = list(enet, linreg, pls = pls))
causal <- MLCM(data = newdata, int_date = 2019, inf_type = "classic", PCV = pcv,
nboot = 10, CATE = FALSE, y.lag = 2, alpha = 0.02)
causal$ate$estimate
causal$ate$conf.interval
new <- Sys.time()
new - old
old <- Sys.time()
### Example 2. Changing ML methods and estimating ATE
enet <- list(method = "enet",
tuneGrid = expand.grid(
fraction = seq(0.1, 0.9, by = 0.1),
lambda = seq(0.1, 0.9, by = 0.1)))
linreg <- list(method = "lm",
tuneGrid = expand.grid(
intercept = seq(0, 10, by = 0.5)))
pls <- list(method = "pls",
tuneGrid = expand.grid(ncomp = c(1:5)))
pcv <- PanelCrossValidation(data = newdata, int_date = 2019, trControl = ctrl,
ML_methods = list(enet, linreg, pls = pls))
causal <- MLCM(data = newdata, int_date = 2019, inf_type = "block", PCV = pcv,
nboot = 10, CATE = FALSE, y.lag = 2, alpha = 0.02)
causal$ate$estimate
causal$ate$conf.interval
new <- Sys.time()
new - old
View(data)
old <- Sys.time()
### Example 2. Changing ML methods and estimating ATE
enet <- list(method = "enet",
tuneGrid = expand.grid(
fraction = seq(0.1, 0.9, by = 0.1),
lambda = seq(0.1, 0.9, by = 0.1)))
linreg <- list(method = "lm",
tuneGrid = expand.grid(
intercept = seq(0, 10, by = 0.5)))
pls <- list(method = "pls",
tuneGrid = expand.grid(ncomp = c(1:5)))
pcv <- PanelCrossValidation(data = newdata, int_date = 2019, trControl = ctrl,
ML_methods = list(enet, linreg, pls = pls))
causal <- MLCM(data = newdata, int_date = 2019, inf_type = "block",
nboot = 10, CATE = FALSE, y.lag = 2)
causal$ate$estimate
causal$ate$conf.interval
new <- Sys.time()
new - old
causal$best_method$method
old <- Sys.time()
### Example 2. Changing ML methods and estimating ATE
enet <- list(method = "enet",
tuneGrid = expand.grid(
fraction = seq(0.1, 0.9, by = 0.1),
lambda = seq(0.1, 0.9, by = 0.1)))
linreg <- list(method = "lm",
tuneGrid = expand.grid(
intercept = seq(0, 10, by = 0.5)))
pls <- list(method = "pls",
tuneGrid = expand.grid(ncomp = c(1:5)))
pcv <- PanelCrossValidation(data = newdata, int_date = 2019, trControl = ctrl,
ML_methods = list(enet, linreg, pls = pls))
causal <- MLCM(data = newdata, int_date = 2019, inf_type = "classic",
nboot = 10, CATE = FALSE, y.lag = 2)
causal$ate$estimate
causal$ate$conf.interval
new <- Sys.time()
new - old
old <- Sys.time()
### Example 2. Changing ML methods and estimating ATE
set.seed(1)
enet <- list(method = "enet",
tuneGrid = expand.grid(
fraction = seq(0.1, 0.9, by = 0.1),
lambda = seq(0.1, 0.9, by = 0.1)))
linreg <- list(method = "lm",
tuneGrid = expand.grid(
intercept = seq(0, 10, by = 0.5)))
pls <- list(method = "pls",
tuneGrid = expand.grid(ncomp = c(1:5)))
pcv <- PanelCrossValidation(data = newdata, int_date = 2019, trControl = ctrl,
ML_methods = list(enet, linreg, pls = pls))
causal <- MLCM(data = newdata, int_date = 2019, inf_type = "classic",
nboot = 10, CATE = FALSE, y.lag = 2)
causal$ate$estimate
causal$ate$conf.interval
new <- Sys.time()
new - old
new <- Sys.time()
new - old
old <- Sys.time()
# Assume the following intervention dates
int_year_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_year <- rep(int_year_i, each = length(unique(data$year)))
# Define data_stag
data_stag <- data.frame(int_year, data)
# Organizing the dataset with as.PanelMLCM
newdata <- as.PanelMLCM(y = data_stag[, "Y"], timevar = data_stag[, "year"], id = data_stag[, "ID"],
int_date = data_stag[, "int_year"],
x = data_stag[, !(names(data_stag) %in% c("Y", "ID", "year", "int_year"))], y.lag = 2)
# Panel Cross Validation in a staggered setting
pcv_multi <- PanelCrossValidationMulti(data = newdata, ML_methods = list(enet, linreg, pls) )
# ATE estimation
causal <- MLCM(data = newdata, int_date = "int_date", inf_type = "block", nboot = 10, PCV = pcv)
old <- Sys.time()
# Assume the following intervention dates
int_year_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_year <- rep(int_year_i, each = length(unique(data$year)))
# Define data_stag
data_stag <- data.frame(int_year, data)
# Organizing the dataset with as.PanelMLCM
newdata <- as.PanelMLCM(y = data_stag[, "Y"], timevar = data_stag[, "year"], id = data_stag[, "ID"],
int_date = data_stag[, "int_year"],
x = data_stag[, !(names(data_stag) %in% c("Y", "ID", "year", "int_year"))], y.lag = 2)
# Panel Cross Validation in a staggered setting
pcv_multi <- PanelCrossValidationMulti(data = newdata, ML_methods = list(enet, linreg, pls) )
# ATE estimation
causal <- StagMLCM(data = newdata, int_date = "int_date", inf_type = "block", nboot = 10, PCV = pcv)
old <- Sys.time()
# Assume the following intervention dates
int_year_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_year <- rep(int_year_i, each = length(unique(data$year)))
# Define data_stag
data_stag <- data.frame(int_year, data)
# Organizing the dataset with as.PanelMLCM
newdata <- as.PanelMLCM(y = data_stag[, "Y"], timevar = data_stag[, "year"], id = data_stag[, "ID"],
int_date = data_stag[, "int_year"],
x = data_stag[, !(names(data_stag) %in% c("Y", "ID", "year", "int_year"))], y.lag = 2)
# Panel Cross Validation in a staggered setting
pcv_multi <- PanelCrossValidationMulti(data = newdata, ML_methods = list(enet, linreg, pls) )
# ATE estimation
causal <- StagMLCM(data = newdata, int_date = "int_date", inf_type = "block", nboot = 10, PCV = pcv_multi)
new <- Sys.time()
pcv_multi$int_2019$best$method
pcv_multi$int_2020$best$method
causal$group_ate
new-old
class(pcv)
class(pcv_multi)
load_all()
load_all()
## Code to prepare `DATA` dataset
#### STEP 1. Setting arguments for function .sim_ardl()
## Parameters
seed <- 1                       # Seed to ensure exact replication of the dataset
post_per <- 1                   # Number of post-intervention periods (excluding int_date)
N <- 100                        # Number of units in the panel
beta <- c(0, 1, 2.5, 0.1,
0, 0, 2, 1.5)         # Coefficient of Xt-1
rho <- 0.8                      # Coefficient of Yt-1
sigma <- 2                      # St.dev of the error term
## Linear or non linear model?
linear <- TRUE
## Impact settings
impact <- c(2,1.5)              # Fictional additive effect (it can be fixed or vary)
impact_constant <- FALSE        # Set to FALSE for additive impact proportional to std.dev(Yt).
#### STEP 2. Simulating covariates
t <- 8
## Generating continuous covariates, varying across units
set.seed(seed)
x1 <- seq(0.2, by = 0.1, length.out = t) + rnorm(t, 0, 1)
xm <- MASS::mvrnorm(n = t, mu = c(1,2,3), Sigma = matrix(c(1,0.5,0.7,0.5, 1, 0.3, 0.7, 0.3, 1), nrow = 3, ncol = 3))
X <- cbind(x1 = x1, x2 = xm[,1], x3 = xm[,2], x4 = xm[,3])
ran <- lapply(1:N, FUN = MASS::mvrnorm, n = NROW(X) , mu = rep(1, ncol(X)), Sigma = 0.1*diag(1, nrow = ncol(X), ncol = ncol(X)))
X <- lapply(ran, function(x){y <- x + X; colnames(y) <- colnames(X); y})
## Generating categorical covariates, varying across units
x5 <- lapply(1:N, FUN = function(x)(sample(0:1, t, replace = TRUE)))
x6 <- lapply(1:N, FUN = function(x)(sample(1:3, t, replace = TRUE)))
## Binding and adding interactions
X <- mapply(X, x5, x6, FUN = function(X, x5, x6)(cbind(X, x5, x6, x7 = X[,3]*x6, x8 = X[,2]*x5)), SIMPLIFY = F)
#### STEP 3. Single dataset generation
data <- .sim_ardl(seed = seed, beta = beta, X = X, N = N, sigma = sigma,
ar1_coef = rho, impact = impact, impact_constant = impact_constant,
linear = linear, post_per = post_per)
View(dat)
dim(dat)
dim(dat)
View(data$dat)
View(data$true_ate)
data$true_ate
source("~/GitHub/MLCM/data-raw/DATASET.R", echo=TRUE)
load_all()
source("~/GitHub/MLCM/data-raw/DATASET.R", echo=TRUE)
dim(data)
old <- Sys.time()
### Example 2. Changing ML methods and estimating ATE
enet <- list(method = "enet",
tuneGrid = expand.grid(
fraction = seq(0.1, 0.9, by = 0.1),
lambda = seq(0.1, 0.9, by = 0.1)))
linreg <- list(method = "lm",
tuneGrid = expand.grid(
intercept = seq(0, 10, by = 0.5)))
pls <- list(method = "pls",
tuneGrid = expand.grid(ncomp = c(1:5)))
pcv <- PanelCrossValidation(data = newdata, int_date = 2019, trControl = ctrl,
ML_methods = list(enet, linreg, pls))
warnings()
View(data)
load_all()
source("~/GitHub/MLCM/data-raw/DATASET.R", echo=TRUE)
View(dat)
ind
dat[1,]
dat[9,]
load_all()
source("~/GitHub/MLCM/data-raw/DATASET.R", echo=TRUE)
old <- Sys.time()
### Example 2. Changing ML methods and estimating ATE
enet <- list(method = "enet",
tuneGrid = expand.grid(
fraction = seq(0.1, 0.9, by = 0.1),
lambda = seq(0.1, 0.9, by = 0.1)))
linreg <- list(method = "lm",
tuneGrid = expand.grid(
intercept = seq(0, 10, by = 0.5)))
pls <- list(method = "pls",
tuneGrid = expand.grid(ncomp = c(1:5)))
pcv <- PanelCrossValidation(data = newdata, int_date = 2019, trControl = ctrl,
ML_methods = list(enet, linreg, pls))
warnings()
View(newdata)
View(data)
old <- Sys.time()
### Example 2. Changing ML methods and estimating ATE
enet <- list(method = "enet",
tuneGrid = expand.grid(
fraction = seq(0.1, 0.9, by = 0.1),
lambda = seq(0.1, 0.9, by = 0.1)))
linreg <- list(method = "lm",
tuneGrid = expand.grid(
intercept = seq(0, 10, by = 0.5)))
pls <- list(method = "pls",
tuneGrid = expand.grid(ncomp = c(1:5)))
pcv <- PanelCrossValidation(data = newdata, int_date = 2019, trControl = ctrl,
ML_methods = list(enet, linreg, pls))
old<- Sys.time()
# Organizing the dataset
newdata <- as.PanelMLCM(y = data[, "Y"], timevar = data[, "year"], id = data[, "ID"],
x = data[, !(names(data) %in% c("Y", "ID", "year"))], y.lag = 1)
# Using the first two years for training and the last two years for testing
indices <- CAST::CreateSpacetimeFolds(newdata, timevar = "Time", k = length(unique(newdata$Time)))
trainx <- indices$indexOut[1:2]
testx <- indices$indexOut[3:4]
ctrl <- trainControl(index = trainx, indexOut = testx)
# Customized panel cross validation
pcv <- PanelCrossValidation(data = newdata, int_date = 2019, trControl = ctrl)
new <- Sys.time()
new - old
old <- Sys.time()
### Example 2. Changing ML methods and estimating ATE
enet <- list(method = "enet",
tuneGrid = expand.grid(
fraction = seq(0.1, 0.9, by = 0.1),
lambda = seq(0.1, 0.9, by = 0.1)))
linreg <- list(method = "lm",
tuneGrid = expand.grid(
intercept = seq(0, 10, by = 0.5)))
pls <- list(method = "pls",
tuneGrid = expand.grid(ncomp = c(1:5)))
pcv <- PanelCrossValidation(data = newdata, int_date = 2019, trControl = ctrl,
ML_methods = list(enet, linreg, pls))
causal <- MLCM(data = newdata, int_date = 2019, inf_type = "classic", PCV = pcv,
nboot = 10, CATE = FALSE)
causal$ate$estimate
causal$ate$conf.interval
new <- Sys.time()
new - old
old <- Sys.time()
### Example 2. Changing ML methods and estimating ATE
enet <- list(method = "enet",
tuneGrid = expand.grid(
fraction = seq(0.1, 0.9, by = 0.1),
lambda = seq(0.1, 0.9, by = 0.1)))
linreg <- list(method = "lm",
tuneGrid = expand.grid(
intercept = seq(0, 10, by = 0.5)))
pls <- list(method = "pls",
tuneGrid = expand.grid(ncomp = c(1:8)))
pcv <- PanelCrossValidation(data = newdata, int_date = 2019, trControl = ctrl,
ML_methods = list(enet, linreg, pls))
causal <- MLCM(data = newdata, int_date = 2019, inf_type = "block", PCV = pcv,
nboot = 10, CATE = FALSE)
causal$ate$estimate
causal$ate$conf.interval
new <- Sys.time()
new - old
old <- Sys.time()
### Example 2. Changing ML methods and estimating ATE
enet <- list(method = "enet",
tuneGrid = expand.grid(
fraction = seq(0.1, 0.9, by = 0.1),
lambda = seq(0.1, 0.9, by = 0.1)))
linreg <- list(method = "lm",
tuneGrid = expand.grid(
intercept = seq(0, 10, by = 0.5)))
pls <- list(method = "pls",
tuneGrid = expand.grid(ncomp = c(1:8)))
pcv <- PanelCrossValidation(data = newdata, int_date = 2019, trControl = ctrl,
ML_methods = list(enet, linreg, pls))
causal <- MLCM(data = newdata, int_date = 2019, inf_type = "block", PCV = pcv,
nboot = 10, CATE = FALSE, y.lag = 2)
causal$ate$estimate
causal$ate$conf.interval
new <- Sys.time()
new - old
old <- Sys.time()
### Example 2. Changing ML methods and estimating ATE
enet <- list(method = "enet",
tuneGrid = expand.grid(
fraction = seq(0.1, 0.9, by = 0.1),
lambda = seq(0.1, 0.9, by = 0.1)))
linreg <- list(method = "lm",
tuneGrid = expand.grid(
intercept = seq(0, 10, by = 0.5)))
pls <- list(method = "pls",
tuneGrid = expand.grid(ncomp = c(1:8)))
pcv <- PanelCrossValidation(data = newdata, int_date = 2019, trControl = ctrl,
ML_methods = list(enet, linreg, pls))
causal <- MLCM(data = newdata, int_date = 2019, inf_type = "block", PCV = pcv,
nboot = 10, CATE = FALSE, y.lag = 2, pcv_block = 2)
causal$ate$estimate
causal$ate$conf.interval
new <- Sys.time()
new - old
load_all()
source("~/GitHub/MLCM/data-raw/DATASET.R", echo=TRUE)
load_all()
load_all()
library(MachineControl)
library(MachineControl)
View(data)
dim(data)
dim(data)
source("~/GitHub/MLCM/data-raw/DATASET.R", echo=TRUE)
source("~/GitHub/MLCM/data-raw/DATASET.R", echo=TRUE)
library(usethis)
source("~/GitHub/MLCM/data-raw/DATASET.R", echo=TRUE)
library(devtools)
source("~/GitHub/MLCM/data-raw/DATASET.R", echo=TRUE)
## Code to prepare `DATA` dataset
source("./R/simulate")
## Code to prepare `DATA` dataset
source("./R/simulate.R")
rm(list=ls())
library(devtools)
library(usethis)
source("~/GitHub/MLCM/data-raw/DATASET.R", echo=TRUE)
load_all()
library(devtools)
load_all()
View(data)
dim(data)
