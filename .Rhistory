###########################################################
## Single dataset generation
###########################################################
data <- sim_ardl(seed = 1, beta = beta, X = X, N = N, sigma = sigma,
ar1_coef = rho, impact = impact, impact_constant = impact_constant,
ylag = FALSE, linear = linear, post_per = post_per)
data <- data$dat
View(data)
ind <- which(is.na(data$Xlag1.x1))
data <- data[-ind,]
View(data)
usethis::use_data(data, overwrite = TRUE)
library(MachineControl)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2020,
inf_type = "classic", nboot = 10, y.lag = 1)
library(MachineControl)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2020,
inf_type = "classic", nboot = 10, CATE = TRUE)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2020,
inf_type = "classic", nboot = 10, y.lag = 1)
library(MachineControl)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2020,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 1)
fit$ate
c(fit$ate.lower, fit$ate.upper)
fit$conf.ate
library(MachineControl)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2020,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 1)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 1)
View(data)
library(MachineControl)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = T)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 1)
fit$ate
fit$conf.ate
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2)
fit$ate
fit$conf.ate
fit$cate.inf
source("~/MLCM/Codes/sim_code_local.R", echo=TRUE)
tab
newdata <- as.PanelMLCM(y = data[, "Y"], timevar = data[, "year"], id = data[, "ID"],
x = data[, !(names(data) %in% c("Y", "ID", "year"))], y.lag = 2)
head(newdata)
newdata <- as.PanelMLCM(y = data[, "Y"], timevar = data[, "year"], id = data[, "ID"],
x = data[, !(names(data) %in% c("Y", "ID", "year"))], y.lag = 2)
newdata <- as.PanelMLCM(y = data[, "Y"], timevar = data[, "year"], id = data[, "ID"],
x = data[, !(names(data) %in% c("Y", "ID", "year"))], y.lag = 1)
head(newdata)
indices <- CAST::CreateSpacetimeFolds(newdata, timevar = "Time", k = length(unique(data$year)))
indices <- CAST::CreateSpacetimeFolds(newdata, timevar = "Time", k = length(unique(newdata$year)))
indices <- CAST::CreateSpacetimeFolds(newdata, timevar = "Time", k = length(unique(newdata$Time)))
trainx <- indices$indexOut[1:2]
testx <- indices$indexOut[3:4]
ctrl <- trainControl(index = trainx, indexOut = testx)
pcv <- PanelCrossValidation(data = newdata, int_date = 2019, trControl = ctrl)
library(MachineControl)
library(MachineControl)
library(MachineControl)
library(MachineControl)
library(MachineControl)
rf <- list(method = "rf", tuneGrid = c(1,2,3), ntree = 10)
rf
names(x) %in% c("method", "tuneGrid")
names(rf) %in% c("method", "tuneGrid")
any(!names(rf) %in% c("method", "tuneGrid"))
c("method", "tuneGrid") %in% names(rf)
!c("method", "tuneGrid") %in% names(rf)
!all(c("method", "tuneGrid") %in% names(rf))
lasso <- list(method = "lasso")
ML_methods <- list(rf, lasso)
any(sapply(ML_methods, FUN = function(x)(!all(c("method", "tuneGrid") %in% names(x)))))
sapply(ML_methods, FUN = function(x)(!all(c("method", "tuneGrid") %in% names(x))))
library(MachineControl)
library(MachineControl)
library(MachineControl)
dim(data)
View(data)
length(unique(data$ID))
x.cate <- cbind(ID = unique(data$ID), x1 = rnorm(100), x2 = 2*rnorm(100), x3 = 3*rnorm(100))
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
library(MachineControl)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
all.equal(data[, id] , x.cate[, id])
all.equal(unique(data[, id]) , x.cate[, id])
library(MachineControl)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
library(MachineControl)
View(effects$ind_effects)
library(MachineControl)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
View(ind_effects)
class(ind_effects)
dim(ind_effects)
length(unique(data$ID))
View(data)
library(MachineControl)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
View(data)
View(data)
View(data)
library(MachineControl)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
View(data)
library(MachineControl)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
View(data_cate)
prova <- merge(data_cate, x.cate, by = "ID")
View(prova)
library(MachineControl)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
View(data_cate)
View(mat)
library(MachineControl)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
fit$ate
fit$conf.ate
fit$cate
fit$cate.inf
library(MachineControl)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
fit$ate
fit$conf.ate
x.cate <- cbind(ID = rep(1:100, each = 2), year = rep(2019:2020, each = 100), x1 = rnorm(200), x2 = 2*rnorm(200))
View(x.cate)
x.cate <- cbind(ID = rep(1:100, each = 2), year = rep(2019:2020, times = 100), x1 = rnorm(200), x2 = 2*rnorm(200))
sample(1:5, size = 10)
sample(1:5, size = 10, replace = T)
library(MachineControl)
x.cate <- cbind(ID = rep(1:100, each = 2), year = rep(2019:2020, times = 100), x1 = rnorm(200),
x2 = 2*rnorm(200), x3 = sample(1:5, size = 200, replace = TRUE))
View(x.cate)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
View(data_cate)
View(data_cate)
View(x.cate)
data_cate <- data.frame(Time = postimes, ID = data[post, "ID"], effect = c(t(ind_effects[,-1])))
View(data_cate)
prova_cate <- merge(data_cate, x.cate)
View(prova_cate)
colnames(x.cate)
colnames(x.cate)[2] <- "Time"
colnames(data_cate)
colnames(x.cate)
prova_cate <- merge(data_cate, x.cate)
View(prova_cate)
prova_cate <- merge(data_cate, x.cate, by = c("ID", "Time"))
View(prova_cate)
View(data.frame(Time = postimes, ID = data[post, "ID"], effect = c(t(ind_effects[,-1]))))
library(MachineControl)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
library(MachineControl)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
View(x.cate)
library(MachineControl)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
colnames(x.cate)
colnames(x.cate)
colnames(x.cate)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
library(MachineControl)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
View(data_cate)
View(data_cate)
View(data_cate)
View(data_cate[data_cate$Time == 2019,])
View(mat)
library(MachineControl)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
class(cate)
class(cate.inf)
class(cate[[1]])
class(cate.inf[[1]])
cate.inf[[1]]
library(MachineControl)
library(MachineControl)
library(MachineControl)
library(MachineControl)
install.packages("caret")
install.packages("CAST")
3.99*24
install.packages("pls")
install.packages("elasticnet")
install.packages("gbm")
install.packages("randomForest")
install.packages("bcaboot")
head(data)
newdata <- as.PanelMLCM(y = data[, "Y"], timevar = data[, "year"], id = data[, "ID"],
x = data[, !(names(data) %in% c("Y", "ID", "year"))], y.lag = 2)
# Results
head(newdata)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019, nboot = 10, y.lag = 2)
sessionInfo()
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, y.lag = 2)
fit$ate
fit$conf.ate
fit$ind.effects
fit$conf.individual
wd <- "H:/Il mio Drive/TESI/Martina"
setwd(wd)
### Data, libraries, functions
data <- read.csv("archivio_2024_pre_imputazione_aggiornato.csv", header = T, sep = ";")
# how many n.d.?
sum(data == "n.d.", na.rm = T)
prova <- mapply(data, FUN = function(x){
ind <- which(x == "n.d.")
x[ind] <- 999999999
}, SIMPLIFY = T)
prova <- lapply(data, FUN = function(x){
ind <- which(x == "n.d.")
x[ind] <- 999999999
})
class(prova[[1]])
length(prova[[1]])
prova[[1]]
prova <- lapply(1:ncol(data), FUN = function(i){
ind <- which(data[,i] == "n.d.")
data[ind,i] <- 999999999
})
length(prova[[1]])
prova[[1]]
prova[[81]]
which(data[,1] == "n.d.")
ind <- which(data[,81] == "n.d.")
data[ind,i] <- 999999999
data[ind,81] <- 999999999
which(data[,81] == "n.d.")
for(i in 1:ncol(data)){
ind <- which(data[,i] == "n.d.")
data[ind, i] <- 999999999
}
sum(data == "n.d.", na.rm = T)
sum(data == 999999999, na.rm = T)
class(data[,81])
rm(list = ls())
setwd("H:/Il mio Drive/IRPET")
### Data, libraries, functions
data <- read.csv("archivio_2024_pre_imputazione_aggiornato.csv", header = T, sep = ";")
# how many n.d.?
nnd <- sum(data == "n.d.", na.rm = T)
# assign 999999999 label to n.d.
for(i in 1:ncol(data)){
ind <- which(data[,i] == "n.d.")
data[ind, i] <- 999999999
}
# check
if(sum(data == 999999999, na.rm = T) == nnd){
print("check OK")} else {
stop("Il numero di nuovi labels è diverso")
}
# Functions
source("Generic_Fun.R")
cl <- check_class(data)
cl$numeric
cl$character
nas <- check_NA(data)
nas$na
nas$na.pp #
nas$na.summary
newdata <- as.PanelMLCM(y = data[, "Y"], timevar = data[, "year"], id = data[, "ID"],
x = data[, !(names(data) %in% c("Y", "ID", "year"))], y.lag = 2)
View(newdata)
length(unique(newdata$ID))
unique(newdata$Time)
int_date <- rep(c(2019,2020), each = c(3,7))
rep(c(2019,2020), each = 3)
int_date <- c(rep(2019, times = 20), rep(c(2019,2020), each = 40))
int_date
int_date_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_date <- rep(int_date, each = unique(newdata$Time))
int_date_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_date <- rep(int_date, each = length(unique(newdata$Time)))
length(int_date)
dim(newdata)
length(unique(newdata$Time))
length(int_date_i)
length(int_date)
int_date_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_date <- rep(int_date_i, each = length(unique(newdata$Time)))
length(int_date)
View(cbind(newdata, int_date))
prova <- PanelCrossValidationMulti(data = newdata, int_date = int_date)
prova <- PanelCrossValidationMulti(data = newdata, int_date = int_date)
prova <- PanelCrossValidationMulti(data = newdata, int_date = int_date)
prova <- PanelCrossValidationMulti(data = newdata, int_date = int_date)
class(prova)
length(prova)
prova[[1]]$best
prova[[2]]$best
any(!(int_date %in% newdata[, "Time"]))
!(int_date %in% newdata[, "Time"])
!(unique(int_date) %in% newdata[, "Time"])
any(!(unique(int_date) %in% data[, "Time"]))
any(!(unique(int_date) %in% newdata[, "Time"]))
sapply(unique(int_date), FUN = function(x)(sum(unique(newdata[, "Time"]) < x) - pcv_block < 1))
sapply(unique(int_date), FUN = function(x)(sum(unique(newdata[, "Time"]) < x) - 1 < 1))
prova <- PanelCrossValidationMulti(data = newdata, int_date = int_date)
class(prova$2019)
prova <- PanelCrossValidationMulti(data = newdata, int_date = int_date)
prova$int_2019$best
prova <- PanelCrossValidationMulti(data = newdata, int_date = c(int_date,2017))
prova <- PanelCrossValidationMulti(data = newdata, int_date = rep(c(rep(2015, times = 20), rep(2019, times = 80)), each = 5))
unique(newdata$Time)
prova <- PanelCrossValidationMulti(data = newdata, int_date = rep(c(rep(2017, times = 20), rep(2019, times = 80)), each = 5))
prova <- PanelCrossValidationMulti(data = newdata, int_date = int_date)
View(data[data$Time == unique(int_date)[1],])
nrow(data[data$Time == unique(int_date)[1],])
nrow(data[data$Time == unique(int_date)[2],])
nrow(data[int_date == unique(int_date)[1],])
nrow(data[int_date == unique(int_date)[2],])
prova <- PanelCrossValidationMulti(data = newdata, int_date = int_date)
warnings()
prova$int_2019$best
prova$int_2020$best
int_date_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_date <- rep(int_date_i, each = unique(newdata$Time))
int_date_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_date <- rep(int_date_i, each = unique(newdata$Time))
int_date_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_date <- rep(int_date_i, each = unique(data$year))
head(data.frame(int_date), data)
unique(data$year)
int_date_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_date <- rep(int_date_i, each = unique(data$year))
head(data.frame(int_date, data))
int_date_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_date <- rep(int_date_i, each = length(unique(data$year)))
View(data.frame(int_date, data))
newdata <- as.PanelMLCM(y = data[, "Y"], timevar = data[, "year"], id = data[, "ID"],
x = data[, !(names(data) %in% c("Y", "ID", "year"))], y.lag = 1)
View(newdata)
pcv <- PanelCrossValidationMulti(data = newdata, int_date = int_date)
str(data)
data2 <- data.frame(int_date, data)
str(data2)
newdata <- as.PanelMLCM(y = data2[, "Y"], timevar = data2[, "year"], id = data2[, "ID"],
x = data2[, !(names(data2) %in% c("Y", "ID", "year"))], y.lag = 1)
View(newdata)
View(data.frame(NULL, data))
prova <- NULL
View(data.frame(NULL, data))
# Assume the following intervention dates
int_year_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_year <- rep(int_year_i, each = length(unique(data$year)))
# Assume the following intervention dates
int_year_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_year <- rep(int_year_i, each = length(unique(data$year)))
data2 <- data.frame(int_year, data)
fit <- MLCM(data = data2, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "classic", nboot = 10, y.lag = 2)
fit <- MLCM(data = data2, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "classic", nboot = 10, y.lag = 2)
fit <- MLCM(data = data2, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "classic", nboot = 10, y.lag = 2)
fit <- MLCM(data = data2, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "classic", nboot = 10, y.lag = 2)
unique(int_date)
unique(data[,int_date])
fit <- MLCM(data = data2, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "classic", nboot = 10, y.lag = 2)
fit <- MLCM(data = data2, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "classic", nboot = 10, y.lag = 2)
fit <- MLCM(data = data2, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "classic", nboot = 10, y.lag = 2)
best2 <- lapply(best, FUN = function(x)(x[["best"]]))
best2[[1]]
fit <- MLCM(data = data2, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "classic", nboot = 10, y.lag = 2)
best$int_2019
int_year_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_year <- rep(int_year_i, each = length(unique(data$year)))
# Define data2
data2 <- data.frame(int_year, data)
# Organizing the dataset with as.PanelMLCM
newdata <- as.PanelMLCM(y = data2[, "Y"], timevar = data2[, "year"], id = data[, "ID"],
int_date = data2[, "int_year"],
x = data2[, !(names(data) %in% c("Y", "ID", "year", "int_year"))], y.lag = 1)
pcv <- PanelCrossValidationMulti(data = newdata)
fit <- MLCM(data = data2, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, y.lag = 2)
Q
inherits(data2, "data.frame")
inherits(data2, "matrix")
class(data2)
class(data)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, y.lag = 2)
class(fit)
class(newdata)
inherits(newdata, "PanelMLCM")
is.PanelMLCM(newdata)
inherits(newdata, c("data.frame", "PanelMLCM"))
inherits(newdata, c("matrix", "PanelMLCM"))
inherits(newdata, c("character", "PanelMLCM"))
inherits(newdata, c("character", "PanelMLCM"), which = T)
isa(newdata, "data.frame")
isa(newdata, what = "data.frame")
class(newdata)
isa(newdata, what = "PanelMLCM")
isa(newdata, what = c("data.frame", "PanelMLCM"))
fit <- MLCM(data = data2, y = "Y", timevar = "year", id = "ID", int_date = int_year,
inf_type = "classic", nboot = 10, y.lag = 2)
is.null(y)
class(y) == "character"
lapply(list(y, timevar, id), FUN = function(x)(!(is.null(x) | class(x) == "character")))
mapply(list(y, timevar, id), FUN = function(x)(!(is.null(x) | class(x) == "character")))
mapply(list(y, timevar, id), FUN = function(par)(!(is.null(par) | par %in% colnames(data))))
ck <- mapply(list(y, timevar, id), FUN = function(par)(!(is.null(par) | class(par) == "character")))
ck
fit <- MLCM(data = data2, y = "Y", id = "ID", int_date = int_year,
inf_type = "classic", nboot = 10, y.lag = 2)
fit <- MLCM(data = data2, y = 3, id = "ID", int_date = int_year,
inf_type = "classic", nboot = 10, y.lag = 2)
fit <- MLCM(data = data2, y = "Y", timevar = 3, id = "ID", int_date = int_year,
inf_type = "classic", nboot = 10, y.lag = 2)
ck
which(ck)
90*1.1
110-11
51.623,77-3600
51623.77-3600
c("y", "id", "timevar")[which(ck)]
c("y", "timevar", "id")[which(ck)]
fit <- MLCM(data = data2, y = "Y", timevar = 3, id = 4, int_date = int_year,
inf_type = "classic", nboot = 10, y.lag = 2)
fit <- MLCM(data = data2, y = "Y", timevar = 3, id = 4, int_date = int_year,
inf_type = "classic", nboot = 10, y.lag = 2)
fit <- MLCM(data = data2, y = "Y", timevar = "year", id = "prova", int_date = int_year,
inf_type = "classic", nboot = 10, y.lag = 2)
fit <- MLCM(data = data2, y = "Y", timevar = "year", id = "prova", int_date = int_year,
inf_type = "classic", nboot = 10, y.lag = 2)
ck
c("y", "timevar", "id")[which(ck)]
c(y, timevar, id)[which(ck)]
fit <- MLCM(data = data2, y = "Y", timevar = "year", id = "prova", int_date = int_year,
inf_type = "classic", nboot = 10, y.lag = 2)
int_year2 <- int_year
int_year2[1] <- 2001
unique(int_year2)
fit <- MLCM(data = data2, y = "Y", timevar = "year", id = "prova", int_date = int_year2,
inf_type = "classic", nboot = 10, y.lag = 2)
fit <- MLCM(data = data2, y = "Y", timevar = "year", id = "ID", int_date = int_year2,
inf_type = "classic", nboot = 10, y.lag = 2)
head(data2)
data3 <- data2
head(data3, 10)
data3[1:8,"int_year"]
data3[1:8,"int_year"] <- 2001
unique(data3$int_year)
fit <- MLCM(data = data3, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "classic", nboot = 10, y.lag = 2)
fit <- MLCM(data = data3, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "classic", nboot = 10, y.lag = 2)
is.null(timevar)
any(!(unique(data[,int_date]) %in% data[, "Time"]))
fit <- MLCM(data = data3, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "classic", nboot = 10, y.lag = 2)
time_col
time_col
fit <- MLCM(data = data2, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "classic", nboot = 10, y.lag = 2)
fit <- MLCM(data = data3, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "classic", nboot = 10, y.lag = 2)
fit <- MLCM(data = data2, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "classic", nboot = 10, y.lag = 2)
120+257
377+54
377 - 64
313+64
69+321
377+54
257+120
377-69+5
313+49
362+69
gc()
gc()
rm(list = ls())
gc()
