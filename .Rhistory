geom_point(data = df[df$x<2004,], color = "red")
df <- data.frame(x = names(fit$groupavg), y = fit$groupavg, lower = fit$conf.groupavg[1,],
upper = fit$conf.groupavg[2,])
df$col <- ifelse(df$x < 2004, "brown1","deepskyblue")
df
ggplot(df, aes(x = x, y = y, ymin = min(lower), ymax = max(upper))) +
geom_point(size = 1.5, aes(colour = col)) +
labs(title = "Group-average effects over time")
ggplot(df, aes(x = x, y = y, ymin = min(lower), ymax = max(upper))) +
geom_point(size = 2, aes(colour = col)) +
labs(title = "Group-average effects over time") +
xlab("") + ylab("") + geom_errorbar(aes(ymin = lower, ymax = upper, colour = col), width = 0.2)
ggplot(df, aes(x = x, y = y, ymin = min(lower), ymax = max(upper))) +
geom_point(size = 2, aes(colour = col)) +
labs(title = "Group-average effects over time") +
xlab("") + ylab("") + geom_errorbar(aes(ymin = lower, ymax = upper, colour = col), width = 0.2) +
geom_line(h = 0)
ggplot(df, aes(x = x, y = y, ymin = min(lower), ymax = max(upper))) +
geom_point(size = 2, aes(colour = col)) +
labs(title = "Group-average effects over time") +
xlab("") + ylab("") + geom_errorbar(aes(ymin = lower, ymax = upper, colour = col), width = 0.2) +
geom_hline(yintercept = 0)
ggplot(df, aes(x = x, y = y, ymin = min(lower), ymax = max(upper))) +
geom_point(size = 2, aes(colour = col)) +
labs(title = "Group-average effects over time") +
xlab("") + ylab("") + geom_errorbar(aes(ymin = lower, ymax = upper, colour = col), width = 0.2) +
geom_hline(yintercept = 0, linetype = "dashed")
ggplot(df, aes(x = x, y = y, ymin = min(lower), ymax = max(upper))) +
geom_point(size = 2, aes(colour = col)) +
labs(title = "Group-average effects over time") +
xlab("") + ylab("") + geom_errorbar(aes(ymin = lower, ymax = upper, colour = col), width = 0.2) +
geom_hline(yintercept = 0, linetype = "dashed", colour = "grey")
g <- ggplot(df, aes(x = x, y = y, ymin = min(lower), ymax = max(upper))) +
geom_point(size = 2, aes(colour = col)) +
labs(title = "Group-average effects over time") +
xlab("") + ylab("") + geom_errorbar(aes(ymin = lower, ymax = upper, colour = col), width = 0.2) +
geom_hline(yintercept = 0, linetype = "dashed", colour = "grey")
g + theme_bw()
g + theme_bw() + labs(colour = "prova")
g + theme_bw() + labs(colour = " ")
plot.CausalMLCM <- function(x){
# Step 1. Creating a dataframe
df <- data.frame(times = names(x$groupavg), y = x$groupavg, lower = x$conf.groupavg[1,],
upper = x$conf.groupavg[2,])
df$col <- ifelse(df$times < 2004, "Pre-int","Post-int")
# Step 2. Ggplotting
g <- ggplot(df, aes(x = times, y = y, ymin = min(lower), ymax = max(upper))) +
geom_point(size = 2, aes(colour = col)) +
geom_errorbar(aes(ymin = lower, ymax = upper, colour = col), width = 0.2) +
geom_hline(yintercept = 0, linetype = "dashed", colour = "grey") +
labs(title = "Group-average effects over time", colour = " ") + xlab("") + ylab("") +
scale_color_manual(values = c("Pre-int" = "brown1", "Post-int" = "deepskyblue"))
# Step 3. Returning results
return(g)
}
plot(fit)
plot(fit) + theme_bw()
plot(fit)
int_year_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_year <- rep(int_year_i, each = length(unique(data$year)))
int_year_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_year <- rep(int_year_i, each = length(unique(data$year)))
# Define data_stag
data_stag <- data.frame(int_year, data)
# Estimation
fit <- StagMLCM(data = data_stag, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "block", nboot = 10, y.lag = 2)
lapply(ate_i, function(x)(c(x$placebo_effects, x$ate)))
boot_inf[[1]]$conf.placebo
lapply(1:length(nint), function(i)(list(estimate = c(ate_i[[i]]$placebo_effects, ate_i[[i]]$ate),
conf.interval = cbind(boot_inf[[i]]$conf.placebo, boot_inf[[i]]$conf.ate))))
cohort_eff <- lapply(1:length(nint), function(i)(list(estimate = c(ate_i[[i]]$placebo_effects, ate_i[[i]]$ate),
conf.interval = cbind(boot_inf[[i]]$conf.placebo, boot_inf[[i]]$conf.ate))))
names(cohort_eff) <- names(boot_inf)
cohort_eff$int_2019
ate_i$int_2019$placebo_effects
dim(boot_inf$int_2019$placebo_boot)
dim(boot_inf$int_2019$ate_boot)
View(boot_inf$int_2019$placebo_boot)
View(boot_inf$int_2019$ate_boot)
int_year_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_year <- rep(int_year_i, each = length(unique(data$year)))
# Define data_stag
data_stag <- data.frame(int_year, data)
# Estimation
fit <- StagMLCM(data = data_stag, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "block", nboot = 10, y.lag = 2)
plot(fit, type = "global")
plot(fit, type = "time")
fit$int_date
plot(fit, type = "cohort")
prova<-plot(fit, type = "cohort")
prova$int_2019
prova$int_2020
prova<-plot(fit, type = "cohort")
prova<-plot(fit, type = "time")
prova
prova + theme_bw()
prova<-plot(fit, type = "global")
prova
plot(fit, type = "time")
fit$int_date
list(fit$int_date)
as.list(fit$int_date)
prova<-plot(fit, type = "cohort")
prova<-plot(fit, type = "cohort")
mapply(X = x$group_ate, Y = as.list(x$int_date),
FUN = function(X,Y)(.plot_effects(x = X, int.date = Y)),
SIMPLIFY = FALSE)
mapply(X = x$group_ate, Y = as.list(x$int_date),
FUN = function(X,Y)(.plot_effects(x = X, int_date = Y)),
SIMPLIFY = FALSE)
.plot_effects(x$group_ate$int_2019, int_date = 2019)
.plot_effects(x$group_ate$int_2020, int_date = 2020)
prova<-plot(fit, type = "cohort")
.plot_effects(x = fit$group_ate$int_2020, int_date = 2020)
df
fit$group_ate$int_2019
names(fit$group_ate$int_2019$estimate)
names(x$estimate)
fit$group_ate$int_2019$estimate
fit$group_ate$int_2020$estimate
int_year_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_year <- rep(int_year_i, each = length(unique(data$year)))
# Define data_stag
data_stag <- data.frame(int_year, data)
# Estimation
fit <- StagMLCM(data = data_stag, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "block", nboot = 10, y.lag = 2)
int_year_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_year <- rep(int_year_i, each = length(unique(data$year)))
# Define data_stag
data_stag <- data.frame(int_year, data)
# Estimation
fit <- StagMLCM(data = data_stag, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "block", nboot = 10, y.lag = 2)
View(ind_effects)
View(ind_effects)
colMeans(as.matrix(ind_effects[, -1]))
colnames(ind_effects[,-1])
colnames(ind_effects)
colnames(ind_effects)[-1]
prova<-plot(fit, type = "cohort")
.plot_effects(x$group_ate, int_date = 2019)
.plot_effects(x$group_ate, int_date = 2020)
df
fit$group_ate$int_2019$estimate
fit$group_ate$int_2019$conf.interval
fit$group_ate$int_2020$estimate
int_year_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_year <- rep(int_year_i, each = length(unique(data$year)))
# Define data_stag
data_stag <- data.frame(int_year, data)
# Estimation
fit <- StagMLCM(data = data_stag, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "block", nboot = 10, y.lag = 2)
plot(fit, type = "cohort")
.plot_effects(x$group_ate, int_date = 2019)
.plot_effects(x$group_ate, int_date = 2019)
df
x$int_2019$estimate
.plot_effects(x$int_2019 , int_date = 2019)
.plot_effects(x$int_2020 , int_date = 2020)
df
prova <- plot(fit, type = "cohort")
prova[[1]]
prova[[2]]
plot(fit, type = "cohort")
plot(fit, type = c("global", "time"))
plot(fit, type = c("global", "time"))
plot(fit, type = c("global"))
plot(fit, type = c("global"))
plot(fit, type = c("global")
)
plot(fit, type = c("global", "time"))
plot(fit, type = c("global"))
prova <- plot(fit, type = c("global"))
prova
prova + ggtitle("prova")
prova <- plot(fit, type = "global")
prova$global + ggtitle("prova")
plot(fit, type = "global")
plot(fit, type = "time")
plot(fit, type = "cohort")
plot(fit, type = "time")
plot(fit, type = "global")
plot(fit, type = "global")
install.packages("testthat")
usethis::use_testthat(3)
int_year_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_year <- rep(int_year_i, each = length(unique(data$year)))
# Define data_stag
data_stag <- data.frame(int_year, data)
# Estimation
fit <- StagMLCM(data = data_stag, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "block", nboot = 10, y.lag = 2)
ate
placebo_mean
cbind(as.matrix(placebo_mean), as.matrix(ate))
cbind(as.matrix(placebo_mean, nrow = 1), as.matrix(ate, nrow = 1))
as.matrix(placebo_mean, nrow = 1)
c(placebo_mean, ate)
int_year_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_year <- rep(int_year_i, each = length(unique(data$year)))
# Define data_stag
data_stag <- data.frame(int_year, data)
# Estimation
fit <- StagMLCM(data = data_stag, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "block", nboot = 10, y.lag = 2)
ate_i$int_2019$ate2
global_ate
group$time_eff
cohort_eff
ate_i$int_2019$ate2
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, y.lag = 2)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, y.lag = 2)
fit$ate
fit$placebo.effects
fit$conf.ate
fit$conf.placebo
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, y.lag = 2)
plot(fit, type = "ate")
plot(fit, type = "ate")
plot(fit, type = "ate")
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, y.lag = 2)
fit$ate$estimate
fit$cate
plot(fit, type = "ate")
df
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, y.lag = 2)
x.cate <- cbind(ID = rep(1:100, each = 2), year = rep(2019:2020, times = 100), x1 = rnorm(200),
x2 = 2*rnorm(200), x3 = sample(1:5, size = 200, replace = TRUE))
# Estimation
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
fit$cate
fit$cate.inf
plot(fit$cate)
class(fit$cate)
names(fit$cate)
fit$cate
plot(fit$cate[[1]])
class(fit$cate[[1]])
text(fit$cate[[1]])
rpart.plot(fit$cate[[1]])
install.packages("rpart.plot")
rpart.plot(fit$cate[[1]])
library(rpart.plot)
rpart.plot(fit$cate[[1]])
help(rpart.plot)
rpart.plot(fit$cate)
rpart.plot(fit$cate[[1]])
rpart.plot(fit$cate[[2]])
fit$cate.inf
rpart.plot(fit$cate[[2]])
rpart.plot(fit$cate[[2]], model = TRUE)
x.cate <- cbind(ID = rep(1:100, each = 2), year = rep(2019:2020, times = 100), x1 = rnorm(200),
x2 = 2*rnorm(200), x3 = sample(1:5, size = 200, replace = TRUE))
# Estimation
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, CATE = TRUE, y.lag = 2, x.cate = x.cate)
plot(fit, type = "cate")
plot(fit, type = "cate")
names(x$cate)
names(x$cate[[1]])
lapply(1:length(x$cate), function(i)(rpart.plot(x$cate[[i]], main = paste("CATE,", names(x$cate)[i]))))
rpart.plot(x$cate$2019)
x$cate$2019
length(x$cate)
x$cate[[1]]
x$cate$2019
rpart.plot(x$cate[[1]])
rpart.plot(x$cate[[1]], main = "CATE")
rpart.plot(x$cate[[1]], main = paste("CATE", names(x$cate)[i]))
rpart.plot(x$cate[[1]], main = paste("CATE", names(x$cate)[1]))
plot(fit, type = "cate")
prova <- plot(fit, type = "cate")
plot(fit, type = "cate", box.palette = "Greens")
plot(fit, type = c("ate", "cate"))
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, y.lag = 2)
fit$ate
head(fit$individual$estimate)
head(fit$individual$conf.interval)
head(data)
old <- Sys.time()
default_par <- list(gbm = list(depth = c(1,2,3),
n.trees = c(500, 1000),
shrinkage = seq(0.01, 0.1, by = 0.02),
n.minobsinnode = c(10,20)),
rf = list(ntree = 500),
pls = list(ncomp = c(1:5)),
lasso = list(fraction = seq(0.1, 0.9, by = 0.1)))
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, y.lag = 2, default_par = default_par)
new <- Sys.time()
new - old
old <- Sys.time()
default_par <- list(gbm = list(depth = c(1,2,3),
n.trees = c(500, 1000),
shrinkage = seq(0.02, 0.8, by = 0.02),
n.minobsinnode = c(10,20)),
rf = list(ntree = 500),
pls = list(ncomp = c(1:3)),
lasso = list(fraction = seq(0.2, 0.8, by = 0.1)))
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, y.lag = 2, default_par = default_par)
new <- Sys.time()
new - old
old <- Sys.time()
default_par <- list(gbm = list(depth = c(1,2,3),
n.trees = c(100, 500),
shrinkage = seq(0.02, 0.8, by = 0.02),
n.minobsinnode = c(10,20)),
rf = list(ntree = 500),
pls = list(ncomp = c(1:3)),
lasso = list(fraction = seq(0.2, 0.8, by = 0.1)))
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, y.lag = 2, default_par = default_par)
new <- Sys.time()
new - old
old <- Sys.time()
default_par <- list(gbm = list(depth = c(1,2,3),
n.trees = c(100, 200),
shrinkage = seq(0.02, 0.6, by = 0.02),
n.minobsinnode = c(10,20)),
rf = list(ntree = 100),
pls = list(ncomp = c(1:3)),
lasso = list(fraction = seq(0.2, 0.6, by = 0.1)))
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, y.lag = 2, default_par = default_par)
new <- Sys.time()
new - old
old <- Sys.time()
default_par <- list(gbm = list(depth = c(1,2,3),
n.trees = c(100, 200),
shrinkage = seq(0.02, 0.6, by = 0.02),
n.minobsinnode = c(10,20)),
rf = list(ntree = 100),
pls = list(ncomp = c(1:3)),
lasso = list(fraction = seq(0.2, 0.6, by = 0.1)))
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, y.lag = 2, default_par = default_par)
new <- Sys.time()
new - old
gc()
old <- Sys.time()
default_par <- list(gbm = list(depth = c(1,2,3),
n.trees = c(100, 200),
shrinkage = seq(0.02, 0.6, by = 0.02),
n.minobsinnode = c(10,20)),
rf = list(ntree = 100),
pls = list(ncomp = c(1:3)),
lasso = list(fraction = seq(0.2, 0.6, by = 0.1)))
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, y.lag = 2, default_par = default_par)
new <- Sys.time()
new - old
old <- Sys.time()
default_par <- list(gbm = list(depth = c(1,2,3),
n.trees = c(100, 200),
shrinkage = seq(0.02, 0.6, by = 0.02),
n.minobsinnode = c(10,20)),
rf = list(ntree = 500),
pls = list(ncomp = c(1:3)),
lasso = list(fraction = seq(0.2, 0.6, by = 0.1)))
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, y.lag = 2, default_par = default_par)
new <- Sys.time()
new - old
old <- Sys.time()
default_par <- list(gbm = list(depth = c(1,2,3),
n.trees = c(100, 200),
shrinkage = seq(0.02, 0.6, by = 0.02),
n.minobsinnode = c(10,20)),
rf = list(ntree = 100),
pls = list(ncomp = c(1:3)),
lasso = list(fraction = seq(0.2, 0.6, by = 0.1)))
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 5, y.lag = 2, default_par = default_par)
new <- Sys.time()
new - old
seq(0.02, 0.6, by = 0.02)
seq(0.01, 0.1, by = 0.02)
seq(0.01, 0.1, by = 0.05)
seq(0.01, 0.11, by = 0.05)
seq(0.1, 0.9, by = 0.1)
seq(0.1, 0.9, by = 0.3)
seq(0.2, 0.6, by = 0.1)
old <- Sys.time()
default_par <- list(gbm = list(depth = c(1,2),
n.trees = c(50, 100),
shrinkage = seq(0.01, 0.11, by = 0.05),
n.minobsinnode = c(10,20)),
rf = list(ntree = 50),
pls = list(ncomp = c(1:2)),
lasso = list(fraction = seq(0.1, 0.9, by = 0.3)))
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 5, y.lag = 2, default_par = default_par)
new <- Sys.time()
new - old
gc()
old <- Sys.time()
default_par <- list(gbm = list(depth = c(1,2),
n.trees = c(50, 100),
shrinkage = seq(0.01, 0.11, by = 0.05),
n.minobsinnode = c(10,20)),
rf = list(ntree = 50),
pls = list(ncomp = c(1:2)),
lasso = list(fraction = seq(0.1, 0.9, by = 0.3)))
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 5, y.lag = 2, default_par = default_par)
new <- Sys.time()
new - old
old <- Sys.time()
default_par <- list(gbm = list(depth = c(1,2),
n.trees = c(50, 100),
shrinkage = seq(0.01, 0.11, by = 0.05),
n.minobsinnode = c(20,40)),
rf = list(ntree = 50),
pls = list(ncomp = c(1:2)),
lasso = list(fraction = seq(0.1, 0.9, by = 0.3)))
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 5, y.lag = 2, default_par = default_par)
new <- Sys.time()
new - old
old <- Sys.time()
default_par <- list(gbm = list(depth = c(1,2),
n.trees = c(10, 50),
shrinkage = seq(0.01, 0.6, by = 0.05),
n.minobsinnode = c(20,40)),
rf = list(ntree = 50),
pls = list(ncomp = c(1:2)),
lasso = list(fraction = seq(0.1, 0.9, by = 0.3)))
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 5, y.lag = 2, default_par = default_par)
new <- Sys.time()
new - old
plot(fit, type = "ate")
usethis::use_test("mlcm")
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, y.lag = 2)
library(MachineControl)
fit <- MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, y.lag = 2)
fit$ate$estimate
expect_equal(MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, y.lag = 2)$ate$estimate,
c(-0.09861968, 0.02957445, -0.10848409, 79.89009226, 59.48719116))
devtools::load_all()
expect_equal(MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, y.lag = 2)$ate$estimate,
c(-0.09861968, 0.02957445, -0.10848409, 79.89009226, 59.48719116))
expect_equal(MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, y.lag = 2)$ate$estimate,
exp <- c(-0.09861968, 0.02957445, -0.10848409, 79.89009226, 59.48719116),
names(exp) <- c('2016', '2017', '2018', '2019', '2020'),
exp)
expect_equal(MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, y.lag = 2)$ate$estimate,
c(2016 = -0.09861968, 2017 = 0.02957445, 2018 = -0.10848409, 2019 = 79.89009226, 2020 = 59.48719116))
devtools::load_all()
expect_equal(MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019, inf_type = "classic", nboot = 10, y.lag = 2)$ate$estimate,
c(2016 = -0.09861968, 2017 = 0.02957445, 2018 = -0.10848409, 2019 = 79.89009226, 2020 = 59.48719116))
c(2016 = -0.09861968, 2017 = 0.02957445, 2018 = -0.10848409, 2019 = 79.89009226, 2020 = 59.48719116)
c("2016" = -0.09861968, "2017" = 0.02957445, "2018" = -0.10848409, "2019" = 79.89009226, "2020" = 59.48719116)
class(data)
expect_equal(MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, y.lag = 2)$ate$estimate,
c("2016" = -0.09861968, "2017" = 0.02957445, "2018" = -0.10848409, "2019" = 79.89009226, "2020" = 59.48719116))
test_that("MLCM works", {
expect_equal(MLCM(data = data, y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, y.lag = 2)$ate$estimate,
c("2016" = -0.09861968, "2017" = 0.02957445, "2018" = -0.10848409, "2019" = 79.89009226, "2020" = 59.48719116))
})
test_that("MLCM works", {
expect_equal(MLCM(data = is.matrix(data), y = "Y", timevar = "year", id = "ID", int_date = 2019,
inf_type = "classic", nboot = 10, y.lag = 2)$ate$estimate,
c("2016" = -0.09861968, "2017" = 0.02957445, "2018" = -0.10848409, "2019" = 79.89009226, "2020" = 59.48719116))
})
int_year_i <- c(rep(2019, times = 60), rep(2020, times = 40))
int_year <- rep(int_year_i, each = length(unique(data$year)))
# Define data_stag
data_stag <- data.frame(int_year, data)
# Estimation
fit <- StagMLCM(data = data_stag, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "block", nboot = 10, y.lag = 2)
warnings()
fit$global_ate$estimate
expect_equal(int_year_i <- c(rep(2019, times = 60), rep(2020, times = 40));
expect_equal(int_year_i <- c(rep(2019, times = 60), rep(2020, times = 40)),
int_year <- rep(int_year_i, each = length(unique(data$year))),
data_stag <- data.frame(int_year, data),
StagMLCM(data = data_stag, y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "block", nboot = 10, y.lag = 2)$global_ate$estimate,
c("2016" = -1.8392615, "2017" = 0.5723790, "2018" = -0.3690107, "global_ate" = -0.1961546))
expect_equal(StagMLCM(data = data.frame(int_year, data), y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "block", nboot = 10, y.lag = 2)$global_ate$estimate,
c("2016" = -1.8392615, "2017" = 0.5723790, "2018" = -0.3690107, "global_ate" = -0.1961546))
test_that("StagMLCM works", {
expect_equal(StagMLCM(data = data.frame(int_year, data), y = "Y", timevar = "year", id = "ID", int_date = "int_year",
inf_type = "block", nboot = 10, y.lag = 2)$global_ate$estimate,
c("2016" = -1.8392615, "2017" = 0.5723790, "2018" = -0.3690107, "global_ate" = -0.1961546), tolerance = 10^(-4))
})
load("./refmod.Rdata")
load("~/GitHub/MLCM/data/data.rda")
str(data)
